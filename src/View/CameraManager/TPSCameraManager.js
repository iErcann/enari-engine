import * as THREE from "three";
import { Vector3D } from "../../Core/Vector.js";
import { CameraManager } from "../../View/CameraManager/CameraManager.js";
export class TPSCameraManager extends CameraManager {
  euler = new THREE.Euler(0, 0, 0, "YXZ");
  update(dt) {
    super.update(dt);
    this.camera.position.copy(this.player.position.clone());
    this.player.lookingDirection = this.getDirection();
    this.camera.position.add(new Vector3D(0, this.player.eyeOffsetY * 3, 0));
    this.camera.position.add(this.player.lookingDirection.clone().setY(0).multiplyScalar(-4));
  }
  getDirection() {
    var direction = new Vector3D(0, 0, -1);
    return new THREE.Vector3(0, 0, 0).copy(direction).applyQuaternion(this.camera.quaternion);
  }
  onMouseMove(event) {
    super.onMouseMove(event);
    const PI_2 = Math.PI / 2;
    const minPolarAngle = 0;
    const maxPolarAngle = Math.PI;
    var movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;
    var movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;
    this.euler.setFromQuaternion(this.camera.quaternion);
    this.euler.y -= movementX * 15e-4;
    this.euler.x -= movementY * 15e-4;
    this.euler.x = Math.max(
      PI_2 - maxPolarAngle,
      Math.min(PI_2 - minPolarAngle, this.euler.x)
    );
    this.camera.quaternion.setFromEuler(this.euler);
  }
  constructor(player, camera) {
    super(player, camera);
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRQU0NhbWVyYU1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gXCIuLi8uLi9Db3JlL1BsYXllclwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzRCB9IGZyb20gXCIuLi8uLi9Db3JlL1ZlY3RvclwiO1xyXG5pbXBvcnQgeyBDYW1lcmFNYW5hZ2VyIH0gZnJvbSBcIi4vQ2FtZXJhTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRQU0NhbWVyYU1hbmFnZXIgZXh0ZW5kcyBDYW1lcmFNYW5hZ2VyIHtcclxuICAgIHByaXZhdGUgZXVsZXIgPSBuZXcgVEhSRUUuRXVsZXIoMCwgMCwgMCwgXCJZWFpcIik7XHJcblxyXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci51cGRhdGUoZHQpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLmNvcHkodGhpcy5wbGF5ZXIucG9zaXRpb24uY2xvbmUoKSk7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIubG9va2luZ0RpcmVjdGlvbiA9IHRoaXMuZ2V0RGlyZWN0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uYWRkKG5ldyBWZWN0b3IzRCgwLCB0aGlzLnBsYXllci5leWVPZmZzZXRZKjMgLCAwKSk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uYWRkKHRoaXMucGxheWVyLmxvb2tpbmdEaXJlY3Rpb24uY2xvbmUoKS5zZXRZKDApLm11bHRpcGx5U2NhbGFyKC00KSApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGlyZWN0aW9uKCk6IFZlY3RvcjNEIHtcclxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gbmV3IFZlY3RvcjNEKDAsIDAsIC0xKTtcclxuICAgICAgICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCkuY29weShkaXJlY3Rpb24pLmFwcGx5UXVhdGVybmlvbih0aGlzLmNhbWVyYS5xdWF0ZXJuaW9uKSBhcyBWZWN0b3IzRDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25Nb3VzZU1vdmUoZXZlbnQpIHtcclxuICAgICAgICBzdXBlci5vbk1vdXNlTW92ZShldmVudCk7XHJcbiAgICAgICAgY29uc3QgUElfMiA9IE1hdGguUEkgLyAyO1xyXG4gICAgICAgIGNvbnN0IG1pblBvbGFyQW5nbGUgPSAwOyAvLyByYWRpYW5zXHJcbiAgICAgICAgY29uc3QgbWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7IC8vIHJhZGlhbnNcclxuXHJcbiAgICAgICAgdmFyIG1vdmVtZW50WCA9XHJcbiAgICAgICAgICAgIGV2ZW50Lm1vdmVtZW50WCB8fCBldmVudC5tb3pNb3ZlbWVudFggfHwgZXZlbnQud2Via2l0TW92ZW1lbnRYIHx8IDA7XHJcbiAgICAgICAgdmFyIG1vdmVtZW50WSA9XHJcbiAgICAgICAgICAgIGV2ZW50Lm1vdmVtZW50WSB8fCBldmVudC5tb3pNb3ZlbWVudFkgfHwgZXZlbnQud2Via2l0TW92ZW1lbnRZIHx8IDA7XHJcbiAgICAgICAgdGhpcy5ldWxlci5zZXRGcm9tUXVhdGVybmlvbih0aGlzLmNhbWVyYS5xdWF0ZXJuaW9uKTtcclxuICAgICAgICB0aGlzLmV1bGVyLnkgLT0gbW92ZW1lbnRYICogMC4wMDE1O1xyXG4gICAgICAgIHRoaXMuZXVsZXIueCAtPSBtb3ZlbWVudFkgKiAwLjAwMTU7XHJcblxyXG4gICAgICAgIHRoaXMuZXVsZXIueCA9IE1hdGgubWF4KFxyXG4gICAgICAgICAgICBQSV8yIC0gbWF4UG9sYXJBbmdsZSxcclxuICAgICAgICAgICAgTWF0aC5taW4oUElfMiAtIG1pblBvbGFyQW5nbGUsIHRoaXMuZXVsZXIueClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhLnF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKHRoaXMuZXVsZXIpO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXIsIGNhbWVyYTogVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICAgICAgICBzdXBlcihwbGF5ZXIsIGNhbWVyYSk7XHJcbiAgICB9XHJcblxyXG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLFdBQVc7QUFFdkIsU0FBUyxnQkFBZ0I7QUFDekIsU0FBUyxxQkFBcUI7QUFFdkIsYUFBTSx5QkFBeUIsY0FBYztBQUFBLEVBQ3hDLFFBQVEsSUFBSSxNQUFNLE1BQU0sR0FBRyxHQUFHLEdBQUcsS0FBSztBQUFBLEVBRTlDLE9BQU8sSUFBa0I7QUFDckIsVUFBTSxPQUFPLEVBQUU7QUFDZixTQUFLLE9BQU8sU0FBUyxLQUFLLEtBQUssT0FBTyxTQUFTLE1BQU0sQ0FBQztBQUN0RCxTQUFLLE9BQU8sbUJBQW1CLEtBQUssYUFBYTtBQUNqRCxTQUFLLE9BQU8sU0FBUyxJQUFJLElBQUksU0FBUyxHQUFHLEtBQUssT0FBTyxhQUFXLEdBQUksQ0FBQyxDQUFDO0FBQ3RFLFNBQUssT0FBTyxTQUFTLElBQUksS0FBSyxPQUFPLGlCQUFpQixNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsZUFBZSxFQUFFLENBQUU7QUFBQSxFQUU3RjtBQUFBLEVBRU8sZUFBeUI7QUFDNUIsUUFBSSxZQUFZLElBQUksU0FBUyxHQUFHLEdBQUcsRUFBRTtBQUNyQyxXQUFPLElBQUksTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEVBQUUsS0FBSyxTQUFTLEVBQUUsZ0JBQWdCLEtBQUssT0FBTyxVQUFVO0FBQUEsRUFDNUY7QUFBQSxFQUVPLFlBQVksT0FBTztBQUN0QixVQUFNLFlBQVksS0FBSztBQUN2QixVQUFNLE9BQU8sS0FBSyxLQUFLO0FBQ3ZCLFVBQU0sZ0JBQWdCO0FBQ3RCLFVBQU0sZ0JBQWdCLEtBQUs7QUFFM0IsUUFBSSxZQUNBLE1BQU0sYUFBYSxNQUFNLGdCQUFnQixNQUFNLG1CQUFtQjtBQUN0RSxRQUFJLFlBQ0EsTUFBTSxhQUFhLE1BQU0sZ0JBQWdCLE1BQU0sbUJBQW1CO0FBQ3RFLFNBQUssTUFBTSxrQkFBa0IsS0FBSyxPQUFPLFVBQVU7QUFDbkQsU0FBSyxNQUFNLEtBQUssWUFBWTtBQUM1QixTQUFLLE1BQU0sS0FBSyxZQUFZO0FBRTVCLFNBQUssTUFBTSxJQUFJLEtBQUs7QUFBQSxNQUNoQixPQUFPO0FBQUEsTUFDUCxLQUFLLElBQUksT0FBTyxlQUFlLEtBQUssTUFBTSxDQUFDO0FBQUEsSUFDL0M7QUFDQSxTQUFLLE9BQU8sV0FBVyxhQUFhLEtBQUssS0FBSztBQUFBLEVBQ2xEO0FBQUEsRUFDQSxZQUFZLFFBQWdCLFFBQWlDO0FBQ3pELFVBQU0sUUFBUSxNQUFNO0FBQUEsRUFDeEI7QUFFSjsiLCJuYW1lcyI6W119