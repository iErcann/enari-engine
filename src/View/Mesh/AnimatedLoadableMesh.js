import * as THREE from "three";
import { GlobalLoadingManager } from "../../View/Mesh/GlobalLoadingManager.js";
import { LoadableMesh } from "../../View/Mesh/LoadableMesh.js";
export class AnimatedLoadableMesh extends LoadableMesh {
  mixer;
  lastAnimationDuration;
  animations = /* @__PURE__ */ new Map();
  currentAnimIsLoop = false;
  currentAnimIsInterrompable = false;
  currentAnim;
  constructor(path, key) {
    super(path, key);
  }
  update(dt) {
    if (this.lastAnimationDuration && this.mixer.time < this.lastAnimationDuration) {
      this.mixer.update(dt);
    } else if (this.currentAnimIsLoop) {
      console.log("Play animation delimiter");
      this.playAnimationDelimiter(this.currentAnim);
    }
  }
  setAnimations(markers) {
    this.animations = markers;
  }
  async load() {
    await super.load();
    this.path = this.path.replace(".glb", "");
    const fileName = this.path;//.split(".")[0];
    const json = await GlobalLoadingManager.loadJson(`${fileName}.json`);
    if (!json) return;
    const markers = json.markers;
    const animationMarkers = /* @__PURE__ */ new Map();
    for (let i = 0; i < markers.length; i++) {
      const marker = markers[i];
      const rawName = marker.name;
      const content = rawName.split("_");
      const name = content[0];
      const state = content[1];
      if (this.animations.has(name)) {
        const animationDelimiter = this.animations.get(name);
        animationDelimiter[state] = marker;
      } else {
        const animationDelimiter = {
          name,
          Start: void 0,
          End: void 0
        };
        animationDelimiter[state] = marker;
        this.animations.set(name, animationDelimiter);
      }
    }
  }
  clone() {
    const loadableMesh = new AnimatedLoadableMesh(this.path, this.key);
    loadableMesh.setMesh(this.cloneMesh());
    loadableMesh.setAnimations(this.animations);
    return loadableMesh;
  }
  // Loop: repeat
  // selfInterrompable: Possibility of the animation to stop itself to play again from 0
  playAnimation(animationName, loop = false, selfInterrompable = true) {
    const animationMarker = this.animations.get(animationName);
    if (!animationMarker) {
      console.log(`${animationName} animation doesn't exist on ${this.key}`);
      return;
    }
    if (!selfInterrompable && animationMarker.name === this.currentAnim.name) {
      return;
    }
    this.mixer.stopAllAction();
    this.currentAnimIsLoop = loop;
    this.currentAnimIsInterrompable = selfInterrompable;
    this.playAnimationDelimiter(animationMarker);
  }
  playAnimationDelimiter(animationMarker) {
    this.currentAnim = animationMarker;
    const clips = this.mesh.animations;
    this.lastAnimationDuration = animationMarker["End"].time - animationMarker["Start"].time;
    const start = Math.abs(animationMarker["Start"].time);
    this.mixer.time = 0;
    this.mixer.timeScale = 1.5;
    for (let i = 0; i < clips.length; i++) {
      const action = this.mixer.clipAction(clips[i]);
      action.loop = THREE.LoopOnce;
      action.time = start;
      action.clampWhenFinished = true;
      action.play();
    }
  }
  init() {
    super.init();
    this.initAnimation();
  }
  initAnimation() {
    this.mixer = new THREE.AnimationMixer(this.mesh);
  }
  playAllAnimation() {
    const clips = this.mesh.animations;
    this.mixer.stopAllAction();
    clips.forEach((clip) => {
      const action = this.mixer.clipAction(clip);
      action.loop = THREE.LoopOnce;
      action.play();
    });
  }
}

//# sourceMappingURL=data:application/json;base64,