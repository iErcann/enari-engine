const Ammo = window.Amma;
import { Actor } from "../../Core/Actor.js";
import { TQuaternion } from "../../Core/Quaternion.js";
import { Vector3D } from "../../Core/Vector.js";
import * as THREE from "three";
import { AmmoInstance } from "../../Physics/Ammo.js";
export class CubeCollider extends Actor {
  createShape(size) {
    const sizeAmmo = new Vector3D(size.x, size.y, size.z).toAmmo();
    const shape = new AmmoInstance.btBoxShape(sizeAmmo);
    AmmoInstance.destroy(sizeAmmo);
    return shape;
  }
  constructor(pos, rotation, size, mass) {
    super(pos, rotation);
    const shape = this.createShape(size.clone().multiplyScalar(0.5));
    const body = this.createBody(shape, pos, rotation, mass);
    this.setBody(body);
  }
  update(dt) {
    super.update(dt, true, true);
  }
  addToWorld(physics) {
    physics.add(this.body);
  }
  follow(dt, actor) {
    const otherPos = actor.position;
    const dir = new THREE.Vector3().subVectors(otherPos, this.position).setY(this.body.getLinearVelocity().y()).multiplyScalar(dt * 100);
    const dirAmmo = Vector3D.fromThree(dir).toAmmo();
    this.body.setLinearVelocity(dirAmmo);
    Ammo.destroy(dirAmmo);
  }
  createBody(shape, pos = Vector3D.ZERO(), rotation = Vector3D.ZERO(), mass = 1) {
    this.transform = new AmmoInstance.btTransform();
    const position = new Vector3D(pos.x, pos.y, pos.z).toAmmo();
    const quat = TQuaternion.setFromVector3D(rotation).toAmmo();
    this.transform.setOrigin(position);
    this.transform.setRotation(quat);
    const myMotionState = new AmmoInstance.btDefaultMotionState(
      this.transform
    );
    const localInertia = new AmmoInstance.btVector3(0, 0, 0);
    shape.calculateLocalInertia(mass, localInertia);
    const rbInfo = new AmmoInstance.btRigidBodyConstructionInfo(
      mass,
      myMotionState,
      shape,
      localInertia
    );
    const body = new AmmoInstance.btRigidBody(rbInfo);
    if (mass === 0) {
      const DISABLE_SIMULATION = 5;
      body.setActivationState(DISABLE_SIMULATION);
    }
    AmmoInstance.destroy(position);
    AmmoInstance.destroy(quat);
    AmmoInstance.destroy(localInertia);
    const DISABLE_DEACTIVATION = 4;
    body.setActivationState(DISABLE_DEACTIVATION);
    return body;
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkN1YmVDb2xsaWRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQW1tbyBmcm9tIFwiYW1tb2pzLXR5cGVkXCI7XHJcbmltcG9ydCB7IElCb2R5IH0gZnJvbSBcIi4uLy4uL0ludGVyZmFjZS9JQm9keVwiO1xyXG5pbXBvcnQgeyBJVXBkYXRhYmxlIH0gZnJvbSBcIi4uLy4uL0ludGVyZmFjZS9JVXBkYXRhYmxlXCI7XHJcbmltcG9ydCB7IFBoeXNpY3MgfSBmcm9tIFwiLi4vUGh5c2ljc1wiO1xyXG5pbXBvcnQgeyBBY3RvciB9IGZyb20gXCIuLi8uLi9Db3JlL0FjdG9yXCI7XHJcbmltcG9ydCB7IFRRdWF0ZXJuaW9uIH0gZnJvbSBcIi4uLy4uL0NvcmUvUXVhdGVybmlvblwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzRCB9IGZyb20gXCIuLi8uLi9Db3JlL1ZlY3RvclwiO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcclxuaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi8uLi9HYW1lXCI7XHJcbmltcG9ydCB7IEFtbW9JbnN0YW5jZSB9IGZyb20gXCIuLi9BbW1vXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ3ViZUNvbGxpZGVyIGV4dGVuZHMgQWN0b3IgaW1wbGVtZW50cyBJVXBkYXRhYmxlIHtcclxuICBwcm90ZWN0ZWQgY3JlYXRlU2hhcGUoc2l6ZTogVmVjdG9yM0QpOiBBbW1vLmJ0Q29sbGlzaW9uU2hhcGUge1xyXG4gICAgLy9jb25zdCBzaXplQW1tbyA9IHNpemUudG9BbW1vKCk7XHJcbiAgICBjb25zdCBzaXplQW1tbyA9IG5ldyBWZWN0b3IzRChzaXplLngsIHNpemUueSwgc2l6ZS56KS50b0FtbW8oKTtcclxuICAgIGNvbnN0IHNoYXBlID0gbmV3IEFtbW9JbnN0YW5jZSEuYnRCb3hTaGFwZShzaXplQW1tbyk7XHJcbiAgICBBbW1vSW5zdGFuY2UhLmRlc3Ryb3koc2l6ZUFtbW8pO1xyXG4gICAgcmV0dXJuIHNoYXBlO1xyXG4gIH1cclxuICBjb25zdHJ1Y3Rvcihwb3M6IFZlY3RvcjNELCByb3RhdGlvbjogVmVjdG9yM0QsIHNpemU6IFZlY3RvcjNELCBtYXNzOiBudW1iZXIpIHtcclxuICAgIHN1cGVyKHBvcywgcm90YXRpb24pO1xyXG4gICAgY29uc3Qgc2hhcGUgPSB0aGlzLmNyZWF0ZVNoYXBlKHNpemUuY2xvbmUoKS5tdWx0aXBseVNjYWxhcigwLjUpKTtcclxuICAgIGNvbnN0IGJvZHkgPSB0aGlzLmNyZWF0ZUJvZHkoc2hhcGUsIHBvcywgcm90YXRpb24sIG1hc3MpO1xyXG4gICAgdGhpcy5zZXRCb2R5KGJvZHkpO1xyXG4gIH1cclxuICB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgc3VwZXIudXBkYXRlKGR0LCB0cnVlLCB0cnVlKTtcclxuICAgIC8vdGhpcy5mb2xsb3coZHQsIEdhbWUuZ2V0SW5zdGFuY2UoKS5jdXJyZW50UGxheWVyLnBsYXllcik7XHJcbiAgfVxyXG4gIHB1YmxpYyBhZGRUb1dvcmxkKHBoeXNpY3M6IFBoeXNpY3MpOiB2b2lkIHtcclxuICAgIHBoeXNpY3MuYWRkKHRoaXMuYm9keSk7XHJcbiAgfVxyXG4gIGZvbGxvdyhkdDogbnVtYmVyLCBhY3RvcjogQWN0b3IpOiB2b2lkIHtcclxuICAgIGNvbnN0IG90aGVyUG9zID0gYWN0b3IucG9zaXRpb247XHJcbiAgICBjb25zdCBkaXIgPSBuZXcgVEhSRUUuVmVjdG9yMygpXHJcbiAgICAgIC5zdWJWZWN0b3JzKG90aGVyUG9zLCB0aGlzLnBvc2l0aW9uKVxyXG4gICAgICAuc2V0WSh0aGlzLmJvZHkuZ2V0TGluZWFyVmVsb2NpdHkoKS55KCkpXHJcbiAgICAgIC5tdWx0aXBseVNjYWxhcihkdCAqIDEwMCk7XHJcblxyXG4gICAgY29uc3QgZGlyQW1tbyA9IFZlY3RvcjNELmZyb21UaHJlZShkaXIpLnRvQW1tbygpO1xyXG4gICAgdGhpcy5ib2R5LnNldExpbmVhclZlbG9jaXR5KGRpckFtbW8pO1xyXG4gICAgQW1tby5kZXN0cm95KGRpckFtbW8pO1xyXG4gIH1cclxuICBwcm90ZWN0ZWQgY3JlYXRlQm9keShcclxuICAgIHNoYXBlOiBBbW1vLmJ0Q29sbGlzaW9uU2hhcGUsXHJcbiAgICBwb3M6IFZlY3RvcjNEID0gVmVjdG9yM0QuWkVSTygpLFxyXG4gICAgcm90YXRpb246IFZlY3RvcjNEID0gVmVjdG9yM0QuWkVSTygpLFxyXG4gICAgbWFzczogbnVtYmVyID0gMVxyXG4gICk6IEFtbW8uYnRSaWdpZEJvZHkge1xyXG4gICAgdGhpcy50cmFuc2Zvcm0gPSBuZXcgQW1tb0luc3RhbmNlIS5idFRyYW5zZm9ybSgpO1xyXG4gICAgLy9jb25zdCBwb3NpdGlvbiA9IHBvcy50b0FtbW8oKTtcclxuICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IFZlY3RvcjNEKHBvcy54LCBwb3MueSwgcG9zLnopLnRvQW1tbygpO1xyXG4gICAgY29uc3QgcXVhdCA9IFRRdWF0ZXJuaW9uLnNldEZyb21WZWN0b3IzRChyb3RhdGlvbikudG9BbW1vKCk7XHJcbiAgICB0aGlzLnRyYW5zZm9ybS5zZXRPcmlnaW4ocG9zaXRpb24pO1xyXG4gICAgdGhpcy50cmFuc2Zvcm0uc2V0Um90YXRpb24ocXVhdCk7XHJcbiAgICAvL3RoaXMudHJhbnNmb3JtLnNldElkZW50aXR5KCk7XHJcbiAgICBjb25zdCBteU1vdGlvblN0YXRlID0gbmV3IEFtbW9JbnN0YW5jZSEuYnREZWZhdWx0TW90aW9uU3RhdGUoXHJcbiAgICAgIHRoaXMudHJhbnNmb3JtXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGxvY2FsSW5lcnRpYSA9IG5ldyBBbW1vSW5zdGFuY2UhLmJ0VmVjdG9yMygwLCAwLCAwKTtcclxuICAgIHNoYXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCBsb2NhbEluZXJ0aWEpO1xyXG4gICAgY29uc3QgcmJJbmZvID0gbmV3IEFtbW9JbnN0YW5jZSEuYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvKFxyXG4gICAgICBtYXNzLFxyXG4gICAgICBteU1vdGlvblN0YXRlLFxyXG4gICAgICBzaGFwZSxcclxuICAgICAgbG9jYWxJbmVydGlhXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGJvZHkgPSBuZXcgQW1tb0luc3RhbmNlIS5idFJpZ2lkQm9keShyYkluZm8pO1xyXG4gICAgaWYgKG1hc3MgPT09IDApIHtcclxuICAgICAgY29uc3QgRElTQUJMRV9TSU1VTEFUSU9OID0gNTtcclxuICAgICAgYm9keS5zZXRBY3RpdmF0aW9uU3RhdGUoRElTQUJMRV9TSU1VTEFUSU9OKTtcclxuICAgIH1cclxuICAgIEFtbW9JbnN0YW5jZSEuZGVzdHJveShwb3NpdGlvbik7XHJcbiAgICBBbW1vSW5zdGFuY2UhLmRlc3Ryb3kocXVhdCk7XHJcbiAgICBBbW1vSW5zdGFuY2UhLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcclxuICAgIC8vICBBbW1vLmRlc3Ryb3kobXlNb3Rpb25TdGF0ZSk7XHJcbiAgICBjb25zdCBESVNBQkxFX0RFQUNUSVZBVElPTiA9IDQ7XHJcbiAgICBib2R5LnNldEFjdGl2YXRpb25TdGF0ZShESVNBQkxFX0RFQUNUSVZBVElPTik7XHJcblxyXG4gICAgcmV0dXJuIGJvZHk7XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxVQUFVO0FBSWpCLFNBQVMsYUFBYTtBQUN0QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLGdCQUFnQjtBQUN6QixZQUFZLFdBQVc7QUFFdkIsU0FBUyxvQkFBb0I7QUFFdEIsYUFBTSxxQkFBcUIsTUFBNEI7QUFBQSxFQUNsRCxZQUFZLE1BQXVDO0FBRTNELFVBQU0sV0FBVyxJQUFJLFNBQVMsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUMsRUFBRSxPQUFPO0FBQzdELFVBQU0sUUFBUSxJQUFJLGFBQWMsV0FBVyxRQUFRO0FBQ25ELGlCQUFjLFFBQVEsUUFBUTtBQUM5QixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBQ0EsWUFBWSxLQUFlLFVBQW9CLE1BQWdCLE1BQWM7QUFDM0UsVUFBTSxLQUFLLFFBQVE7QUFDbkIsVUFBTSxRQUFRLEtBQUssWUFBWSxLQUFLLE1BQU0sRUFBRSxlQUFlLEdBQUcsQ0FBQztBQUMvRCxVQUFNLE9BQU8sS0FBSyxXQUFXLE9BQU8sS0FBSyxVQUFVLElBQUk7QUFDdkQsU0FBSyxRQUFRLElBQUk7QUFBQSxFQUNuQjtBQUFBLEVBQ0EsT0FBTyxJQUFrQjtBQUN2QixVQUFNLE9BQU8sSUFBSSxNQUFNLElBQUk7QUFBQSxFQUU3QjtBQUFBLEVBQ08sV0FBVyxTQUF3QjtBQUN4QyxZQUFRLElBQUksS0FBSyxJQUFJO0FBQUEsRUFDdkI7QUFBQSxFQUNBLE9BQU8sSUFBWSxPQUFvQjtBQUNyQyxVQUFNLFdBQVcsTUFBTTtBQUN2QixVQUFNLE1BQU0sSUFBSSxNQUFNLFFBQVEsRUFDM0IsV0FBVyxVQUFVLEtBQUssUUFBUSxFQUNsQyxLQUFLLEtBQUssS0FBSyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsRUFDdEMsZUFBZSxLQUFLLEdBQUc7QUFFMUIsVUFBTSxVQUFVLFNBQVMsVUFBVSxHQUFHLEVBQUUsT0FBTztBQUMvQyxTQUFLLEtBQUssa0JBQWtCLE9BQU87QUFDbkMsU0FBSyxRQUFRLE9BQU87QUFBQSxFQUN0QjtBQUFBLEVBQ1UsV0FDUixPQUNBLE1BQWdCLFNBQVMsS0FBSyxHQUM5QixXQUFxQixTQUFTLEtBQUssR0FDbkMsT0FBZSxHQUNHO0FBQ2xCLFNBQUssWUFBWSxJQUFJLGFBQWMsWUFBWTtBQUUvQyxVQUFNLFdBQVcsSUFBSSxTQUFTLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsT0FBTztBQUMxRCxVQUFNLE9BQU8sWUFBWSxnQkFBZ0IsUUFBUSxFQUFFLE9BQU87QUFDMUQsU0FBSyxVQUFVLFVBQVUsUUFBUTtBQUNqQyxTQUFLLFVBQVUsWUFBWSxJQUFJO0FBRS9CLFVBQU0sZ0JBQWdCLElBQUksYUFBYztBQUFBLE1BQ3RDLEtBQUs7QUFBQSxJQUNQO0FBRUEsVUFBTSxlQUFlLElBQUksYUFBYyxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBQ3hELFVBQU0sc0JBQXNCLE1BQU0sWUFBWTtBQUM5QyxVQUFNLFNBQVMsSUFBSSxhQUFjO0FBQUEsTUFDL0I7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBRUEsVUFBTSxPQUFPLElBQUksYUFBYyxZQUFZLE1BQU07QUFDakQsUUFBSSxTQUFTLEdBQUc7QUFDZCxZQUFNLHFCQUFxQjtBQUMzQixXQUFLLG1CQUFtQixrQkFBa0I7QUFBQSxJQUM1QztBQUNBLGlCQUFjLFFBQVEsUUFBUTtBQUM5QixpQkFBYyxRQUFRLElBQUk7QUFDMUIsaUJBQWMsUUFBUSxZQUFZO0FBRWxDLFVBQU0sdUJBQXVCO0FBQzdCLFNBQUssbUJBQW1CLG9CQUFvQjtBQUU1QyxXQUFPO0FBQUEsRUFDVDtBQUNGOyIsIm5hbWVzIjpbXX0=