export default {
  initValue: function (value, defaults) {
    var _value = value != null && value != undefined ? value : defaults;

    return _value;
  },
  isArray: function (value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  },
  destroyArray: function (array) {
    array.length = 0;
  },
  destroyObject: function (obj) {
    for (var o in obj) delete obj[o];
  },
  isUndefined: function () {
    for (var id in arguments) {
      var arg = arguments[id];
      if (arg !== undefined) return false;
    }

    return true;
  },
  setVectorByObj: function (target, pOBJ) {
    if (pOBJ['x'] !== undefined) target.position.x = pOBJ['x'];
    if (pOBJ['y'] !== undefined) target.position.y = pOBJ['y'];
    if (pOBJ['z'] !== undefined) target.position.z = pOBJ['z'];
    if (pOBJ['vx'] !== undefined) target.velocity.x = pOBJ['vx'];
    if (pOBJ['vy'] !== undefined) target.velocity.y = pOBJ['vy'];
    if (pOBJ['vz'] !== undefined) target.velocity.z = pOBJ['vz'];
    if (pOBJ['ax'] !== undefined) target.acceleration.x = pOBJ['ax'];
    if (pOBJ['ay'] !== undefined) target.acceleration.y = pOBJ['ay'];
    if (pOBJ['az'] !== undefined) target.acceleration.z = pOBJ['az'];
    if (pOBJ['p'] !== undefined) target.position.copy(pOBJ['p']);
    if (pOBJ['v'] !== undefined) target.velocity.copy(pOBJ['v']);
    if (pOBJ['a'] !== undefined) target.acceleration.copy(pOBJ['a']);
    if (pOBJ['position'] !== undefined) target.position.copy(pOBJ['position']);
    if (pOBJ['velocity'] !== undefined) target.velocity.copy(pOBJ['velocity']);
    if (pOBJ['accelerate'] !== undefined) target.acceleration.copy(pOBJ['accelerate']);
  },
  //set prototype
  setPrototypeByObj: function (target, proObj, filters) {
    for (var key in proObj) {
      // eslint-disable-next-line no-prototype-builtins
      if (target.hasOwnProperty(key)) {
        if (filters) {
          if (filters.indexOf(key) < 0) target[key] = this._getValue(proObj[key]);
        } else {
          target[key] = this._getValue(proObj[key]);
        }
      }
    }

    return target;
  },
  _getValue: function (pan) {
    if (pan.constructor.type === 'Span') return pan.getValue();else return pan;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9VdGlsLmpzIl0sIm5hbWVzIjpbImluaXRWYWx1ZSIsInZhbHVlIiwiZGVmYXVsdHMiLCJfdmFsdWUiLCJ1bmRlZmluZWQiLCJpc0FycmF5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiZGVzdHJveUFycmF5IiwiYXJyYXkiLCJsZW5ndGgiLCJkZXN0cm95T2JqZWN0Iiwib2JqIiwibyIsImlzVW5kZWZpbmVkIiwiaWQiLCJhcmd1bWVudHMiLCJhcmciLCJzZXRWZWN0b3JCeU9iaiIsInRhcmdldCIsInBPQkoiLCJwb3NpdGlvbiIsIngiLCJ5IiwieiIsInZlbG9jaXR5IiwiYWNjZWxlcmF0aW9uIiwiY29weSIsInNldFByb3RvdHlwZUJ5T2JqIiwicHJvT2JqIiwiZmlsdGVycyIsImtleSIsImhhc093blByb3BlcnR5IiwiaW5kZXhPZiIsIl9nZXRWYWx1ZSIsInBhbiIsImNvbnN0cnVjdG9yIiwidHlwZSIsImdldFZhbHVlIl0sIm1hcHBpbmdzIjoiQUFBQSxlQUFlO0FBQ2JBLEVBQUFBLFNBQVMsRUFBRSxVQUFTQyxLQUFULEVBQWdCQyxRQUFoQixFQUEwQjtBQUNuQyxRQUFJQyxNQUFNLEdBQUdGLEtBQUssSUFBSSxJQUFULElBQWlCQSxLQUFLLElBQUlHLFNBQTFCLEdBQXNDSCxLQUF0QyxHQUE4Q0MsUUFBM0Q7O0FBRUEsV0FBT0MsTUFBUDtBQUNELEdBTFk7QUFPYkUsRUFBQUEsT0FBTyxFQUFFLFVBQVNKLEtBQVQsRUFBZ0I7QUFDdkIsV0FBT0ssTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JSLEtBQS9CLE1BQTBDLGdCQUFqRDtBQUNELEdBVFk7QUFXYlMsRUFBQUEsWUFBWSxFQUFFLFVBQVNDLEtBQVQsRUFBZ0I7QUFDNUJBLElBQUFBLEtBQUssQ0FBQ0MsTUFBTixHQUFlLENBQWY7QUFDRCxHQWJZO0FBZWJDLEVBQUFBLGFBQWEsRUFBRSxV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QXFCbEIsU0FBekIsRUFBb0NpQixNQUFNLENBQUNNLFFBQVAsQ0FBZ0JFLElBQWhCLENBQXFCUCxJQUFJLENBQUMsVUFBRCxDQUF6QjtBQUNwQyxRQUFJQSxJQUFJLENBQUMsWUFBRCxDQUFKLEtBQXVCbEIsU0FBM0IsRUFDRWlCLE1BQU0sQ0FBQ08sWUFBUCxDQUFvQkMsSUFBcEIsQ0FBeUJQLElBQUksQ0FBQyxZQUFELENBQTdCO0FBQ0gsR0FsRFk7QUFvRGI7QUFDQVEsRUFBQUEsaUJBQWlCLEVBQUUsVUFBU1QsTUFBVCxFQUFpQlUsTUFBakIsRUFBeUJDLE9BQXpCLEVBQWtDO0FBQ25ELFNBQUssSUFBSUMsR0FBVCxJQUFnQkYsTUFBaEIsRUFBd0I7QUFDdEI7QUFDQSxVQUFJVixNQUFNLENBQUNhLGNBQVAsQ0FBc0JELEdBQXRCLENBQUosRUFBZ0M7QUFDOUIsWUFBSUQsT0FBSixFQUFhO0FBQ1gsY0FBSUEsT0FBTyxDQUFDRyxPQUFSLENBQWdCRixHQUFoQixJQUF1QixDQUEzQixFQUNFWixNQUFNLENBQUNZLEdBQUQsQ0FBTixHQUFjLEtBQUtHLFNBQUwsQ0FBZUwsTUFBTSxDQUFDRSxHQUFELENBQXJCLENBQWQ7QUFDSCxTQUhELE1BR087QUFDTFosVUFBQUEsTUFBTSxDQUFDWSxHQUFELENBQU4sR0FBYyxLQUFLRyxTQUFMLENBQWVMLE1BQU0sQ0FBQ0UsR0FBRCxDQUFyQixDQUFkO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU9aLE1BQVA7QUFDRCxHQW5FWTtBQXFFYmUsRUFBQUEsU0FBUyxFQUFFLFVBQVNDLEdBQVQsRUFBYztBQUN2QixRQUFJQSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JDLElBQWhCLEtBQXlCLE1BQTdCLEVBQXFDLE9BQU9GLEdBQUcsQ0FBQ0csUUFBSixFQUFQLENBQXJDLEtBQ0ssT0FBT0gsR0FBUDtBQUNOO0FBeEVZLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIGluaXRWYWx1ZTogZnVuY3Rpb24odmFsdWUsIGRlZmF1bHRzKSB7XG4gICAgdmFyIF92YWx1ZSA9IHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT0gdW5kZWZpbmVkID8gdmFsdWUgOiBkZWZhdWx0cztcblxuICAgIHJldHVybiBfdmFsdWU7XG4gIH0sXG5cbiAgaXNBcnJheTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfSxcblxuICBkZXN0cm95QXJyYXk6IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgYXJyYXkubGVuZ3RoID0gMDtcbiAgfSxcblxuICBkZXN0cm95T2JqZWN0OiBmdW5jdGlvbihvYmopIHtcbiAgICBmb3IgKHZhciBvIGluIG9iaikgZGVsZXRlIG9ialtvXTtcbiAgfSxcblxuICBpc1VuZGVmaW5lZDogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaWQgaW4gYXJndW1lbnRzKSB7XG4gICAgICB2YXIgYXJnID0gYXJndW1lbnRzW2lkXTtcblxuICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgc2V0VmVjdG9yQnlPYmo6IGZ1bmN0aW9uKHRhcmdldCwgcE9CSikge1xuICAgIGlmIChwT0JKWyd4J10gIT09IHVuZGVmaW5lZCkgdGFyZ2V0LnBvc2l0aW9uLnggPSBwT0JKWyd4J107XG4gICAgaWYgKHBPQkpbJ3knXSAhPT0gdW5kZWZpbmVkKSB0YXJnZXQucG9zaXRpb24ueSA9IHBPQkpbJ3knXTtcbiAgICBpZiAocE9CSlsneiddICE9PSB1bmRlZmluZWQpIHRhcmdldC5wb3NpdGlvbi56ID0gcE9CSlsneiddO1xuXG4gICAgaWYgKHBPQkpbJ3Z4J10gIT09IHVuZGVmaW5lZCkgdGFyZ2V0LnZlbG9jaXR5LnggPSBwT0JKWyd2eCddO1xuICAgIGlmIChwT0JKWyd2eSddICE9PSB1bmRlZmluZWQpIHRhcmdldC52ZWxvY2l0eS55ID0gcE9CSlsndnknXTtcbiAgICBpZiAocE9CSlsndnonXSAhPT0gdW5kZWZpbmVkKSB0YXJnZXQudmVsb2NpdHkueiA9IHBPQkpbJ3Z6J107XG5cbiAgICBpZiAocE9CSlsnYXgnXSAhPT0gdW5kZWZpbmVkKSB0YXJnZXQuYWNjZWxlcmF0aW9uLnggPSBwT0JKWydheCddO1xuICAgIGlmIChwT0JKWydheSddICE9PSB1bmRlZmluZWQpIHRhcmdldC5hY2NlbGVyYXRpb24ueSA9IHBPQkpbJ2F5J107XG4gICAgaWYgKHBPQkpbJ2F6J10gIT09IHVuZGVmaW5lZCkgdGFyZ2V0LmFjY2VsZXJhdGlvbi56ID0gcE9CSlsnYXonXTtcblxuICAgIGlmIChwT0JKWydwJ10gIT09IHVuZGVmaW5lZCkgdGFyZ2V0LnBvc2l0aW9uLmNvcHkocE9CSlsncCddKTtcbiAgICBpZiAocE9CSlsndiddICE9PSB1bmRlZmluZWQpIHRhcmdldC52ZWxvY2l0eS5jb3B5KHBPQkpbJ3YnXSk7XG4gICAgaWYgKHBPQkpbJ2EnXSAhPT0gdW5kZWZpbmVkKSB0YXJnZXQuYWNjZWxlcmF0aW9uLmNvcHkocE9CSlsnYSddKTtcblxuICAgIGlmIChwT0JKWydwb3NpdGlvbiddICE9PSB1bmRlZmluZWQpIHRhcmdldC5wb3NpdGlvbi5jb3B5KHBPQkpbJ3Bvc2l0aW9uJ10pO1xuICAgIGlmIChwT0JKWyd2ZWxvY2l0eSddICE9PSB1bmRlZmluZWQpIHRhcmdldC52ZWxvY2l0eS5jb3B5KHBPQkpbJ3ZlbG9jaXR5J10pO1xuICAgIGlmIChwT0JKWydhY2NlbGVyYXRlJ10gIT09IHVuZGVmaW5lZClcbiAgICAgIHRhcmdldC5hY2NlbGVyYXRpb24uY29weShwT0JKWydhY2NlbGVyYXRlJ10pO1xuICB9LFxuXG4gIC8vc2V0IHByb3RvdHlwZVxuICBzZXRQcm90b3R5cGVCeU9iajogZnVuY3Rpb24odGFyZ2V0LCBwcm9PYmosIGZpbHRlcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvT2JqKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICBpZiAodGFyZ2V0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgaWYgKGZpbHRlcnMpIHtcbiAgICAgICAgICBpZiAoZmlsdGVycy5pbmRleE9mKGtleSkgPCAwKVxuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB0aGlzLl9nZXRWYWx1ZShwcm9PYmpba2V5XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB0aGlzLl9nZXRWYWx1ZShwcm9PYmpba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9LFxuXG4gIF9nZXRWYWx1ZTogZnVuY3Rpb24ocGFuKSB7XG4gICAgaWYgKHBhbi5jb25zdHJ1Y3Rvci50eXBlID09PSAnU3BhbicpIHJldHVybiBwYW4uZ2V0VmFsdWUoKTtcbiAgICBlbHNlIHJldHVybiBwYW47XG4gIH0sXG59O1xuIl19