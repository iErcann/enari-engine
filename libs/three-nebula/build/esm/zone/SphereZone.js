import { PI } from '../constants';
import Util from '../utils/Util';
import Vector3D from '../math/Vector3D';
import Zone from './Zone';
import { ZONE_TYPE_SPHERE as type } from './types';
/**
 * A spherical zone for particles to be emitted within.
 *
 */

export default class SphereZone extends Zone {
  /**
   * @constructs {SphereZone}
   *
   * @param {number} centerX - the sphere's center x coordinate
   * @param {number} centerY - the sphere's center y coordinate
   * @param {number} centerZ - the sphere's center z coordinate
   * @param {number} radius - the sphere's radius value
   * @return void
   */
  constructor(centerX, centerY, centerZ, radius) {
    super(type); // TODO see below, these should probably be assigned properly
    // eslint-disable-next-line

    let x, y, z, r;

    if (Util.isUndefined(centerY, centerZ, radius)) {
      x = y = z = 0;
      r = centerX || 100;
    } else {
      x = centerX; // eslint-disable-next-line

      y = centerY; // eslint-disable-next-line

      z = centerZ;
      r = radius;
    }

    this.x = x; // TODO shouldn't this be set to y?

    this.y = x; // TODO shouldn't this be set to z?

    this.z = x;
    this.radius = r;
    this.the = this.phi = 0;
  }
  /**
   * Returns true to indicate this is a SphereZone.
   *
   * @return {boolean}
   */


  isSphereZone() {
    return true;
  }
  /**
   * Sets the particle to dead if the particle collides with the sphere.
   *
   * @param {object} particle
   * @return void
   */


  _dead(particle) {
    var d = particle.position.distanceTo(this);
    if (d - particle.radius > this.radius) particle.dead = true;
  }
  /**
   * Warns that this zone does not support the _cross method.
   *
   * @return void
   */


  _cross() {
    console.warn(`${this.constructor.name} does not support the _cross method`);
  }

}

SphereZone.prototype.getPosition = function () {
  var tha, phi, r;
  return function () {
    this.random = Math.random();
    r = this.random * this.radius;
    tha = PI * Math.random(); //[0-pi]

    phi = PI * 2 * Math.random(); //[0-2pi]

    this.vector.x = this.x + r * Math.sin(tha) * Math.cos(phi);
    this.vector.y = this.y + r * Math.sin(phi) * Math.sin(tha);
    this.vector.z = this.z + r * Math.cos(tha);
    return this.vector;
  };
}();

SphereZone.prototype._bound = function () {
  var normal = new Vector3D(),
      v = new Vector3D(),
      k;
  return function (particle) {
    var d = particle.position.distanceTo(this);

    if (d + particle.radius >= this.radius) {
      normal.copy(particle.position).sub(this).normalize();
      v.copy(particle.velocity);
      k = 2 * v.dot(normal);
      particle.velocity.sub(normal.scalar(k));
    }
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy96b25lL1NwaGVyZVpvbmUuanMiXSwibmFtZXMiOlsiUEkiLCJVdGlsIiwiVmVjdG9yM0QiLCJab25lIiwiWk9ORV9UWVBFX1NQSEVSRSIsInR5cGUiLCJTcGhlcmVab25lIiwiY29uc3RydWN0b3IiLCJjZW50ZXJYIiwiY2VudGVyWSIsImNlbnRlcloiLCJyYWRpdXMiLCJ4IiwieSIsInoiLCJyIiwiaXNVbmRlZmluZWQiLCJ0aGUiLCJwaGkiLCJpc1NwaGVyZVpvbmUiLCJfZGVhZCIsInBhcnRpY2xlIiwiZCIsInBvc2l0aW9uIiwiZGlzdGFuY2VUbyIsImRlYWQiLCJfY3Jvc3MiLCJjb25zb2xlIiwid2FybiIsIm5hbWUiLCJwcm90b3R5cGUiLCJnZXRQb3NpdGlvbiIsInRoYSIsInJhbmRvbSIsIk1hdGgiLCJ2ZWN0b3IiLCJzaW4iLCJjb3MiLCJfYm91bmQiLCJub3JtYWwiLCJ2IiwiayIsImNvcHkiLCJzdWIiLCJub3JtYWxpemUiLCJ2ZWxvY2l0eSIsImRvdCIsInNjYWxhciJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsRUFBVCxRQUFtQixjQUFuQjtBQUNBLE9BQU9DLElBQVAsTUFBaUIsZUFBakI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLGtCQUFyQjtBQUNBLE9BQU9DLElBQVAsTUFBaUIsUUFBakI7QUFDQSxTQUFTQyxnQkFBZ0IsSUFBSUMsSUFBN0IsUUFBeUMsU0FBekM7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxlQUFlLE1BQU1DLFVBQU4sU0FBeUJILElBQXpCLENBQThCO0FBQzNDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFSSxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsT0FBVixFQUFtQkMsT0FBbkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQzdDLFVBQU1OLElBQU4sRUFENkMsQ0FHN0M7QUFDQTs7QUFDQSxRQUFJTyxDQUFKLEVBQU9DLENBQVAsRUFBVUMsQ0FBVixFQUFhQyxDQUFiOztBQUVBLFFBQUlkLElBQUksQ0FBQ2UsV0FBTCxDQUFpQlAsT0FBakIsRUFBMEJDLE9BQTFCLEVBQW1DQyxNQUFuQyxDQUFKLEVBQWdEO0FBQzlDQyxNQUFBQSxDQUFDLEdBQUdDLENBQUMsR0FBR0MsQ0FBQyxHQUFHLENBQVo7QUFDQUMsTUFBQUEsQ0FBQyxHQUFHUCxPQUFPLElBQUksR0FBZjtBQUNELEtBSEQsTUFHTztBQUNMSSxNQUFBQSxDQUFDLEdBQUdKLE9BQUosQ0FESyxDQUVMOztBQUNBSyxNQUFBQSxDQUFDLEdBQUdKLE9BQUosQ0FISyxDQUlMOztBQUNBSyxNQUFBQSxDQUFDLEdBQUdKLE9BQUo7QUFDQUssTUFBQUEsQ0FBQyxHQUFHSixNQUFKO0FBQ0Q7O0FBRUQsU0FBS0MsQ0FBTCxHQUFTQSxDQUFULENBbkI2QyxDQXFCN0M7O0FBQ0EsU0FBS0MsQ0FBTCxHQUFTRCxDQUFULENBdEI2QyxDQXdCN0M7O0FBQ0EsU0FBS0UsQ0FBTCxHQUFTRixDQUFUO0FBQ0EsU0FBS0QsTUFBTCxHQUFjSSxDQUFkO0FBQ0EsU0FBS0UsR0FBTCxHQUFXLEtBQUtDLEdBQUwsR0FBVyxDQUF0QjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0VDLEVBQUFBLFlBQVksR0FBRztBQUNiLFdBQU8sSUFBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRUMsRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVc7QUFDZCxRQUFJQyxDQUFDLEdBQUdELFFBQVEsQ0FBQ0UsUUFBVCxDQUFrQkMsVUFBbEIsQ0FBNkIsSUFBN0IsQ0FBUjtBQUVBLFFBQUlGLENBQUMsR0FBR0QsUUFBUSxDQUFDVixNQUFiLEdBQXNCLEtBQUtBLE1BQS9CLEVBQXVDVSxRQUFRLENBQUNJLElBQVQsR0FBZ0IsSUFBaEI7QUFDeEM7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRUMsRUFBQUEsTUFBTSxHQUFHO0FBQ1BDLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFjLEdBQUUsS0FBS3JCLFdBQUwsQ0FBaUJzQixJQUFLLHFDQUF0QztBQUNEOztBQXBFMEM7O0FBdUU3Q3ZCLFVBQVUsQ0FBQ3dCLFNBQVgsQ0FBcUJDLFdBQXJCLEdBQW9DLFlBQVc7QUFDN0MsTUFBSUMsR0FBSixFQUFTZCxHQUFULEVBQWNILENBQWQ7QUFFQSxTQUFPLFlBQVc7QUFDaEIsU0FBS2tCLE1BQUwsR0FBY0MsSUFBSSxDQUFDRCxNQUFMLEVBQWQ7QUFFQWxCLElBQUFBLENBQUMsR0FBRyxLQUFLa0IsTUFBTCxHQUFjLEtBQUt0QixNQUF2QjtBQUNBcUIsSUFBQUEsR0FBRyxHQUFHaEMsRUFBRSxHQUFHa0MsSUFBSSxDQUFDRCxNQUFMLEVBQVgsQ0FKZ0IsQ0FJVTs7QUFDMUJmLElBQUFBLEdBQUcsR0FBR2xCLEVBQUUsR0FBRyxDQUFMLEdBQVNrQyxJQUFJLENBQUNELE1BQUwsRUFBZixDQUxnQixDQUtjOztBQUU5QixTQUFLRSxNQUFMLENBQVl2QixDQUFaLEdBQWdCLEtBQUtBLENBQUwsR0FBU0csQ0FBQyxHQUFHbUIsSUFBSSxDQUFDRSxHQUFMLENBQVNKLEdBQVQsQ0FBSixHQUFvQkUsSUFBSSxDQUFDRyxHQUFMLENBQVNuQixHQUFULENBQTdDO0FBQ0EsU0FBS2lCLE1BQUwsQ0FBWXRCLENBQVosR0FBZ0IsS0FBS0EsQ0FBTCxHQUFTRSxDQUFDLEdBQUdtQixJQUFJLENBQUNFLEdBQUwsQ0FBU2xCLEdBQVQsQ0FBSixHQUFvQmdCLElBQUksQ0FBQ0UsR0FBTCxDQUFTSixHQUFULENBQTdDO0FBQ0EsU0FBS0csTUFBTCxDQUFZckIsQ0FBWixHQUFnQixLQUFLQSxDQUFMLEdBQVNDLENBQUMsR0FBR21CLElBQUksQ0FBQ0csR0FBTCxDQUFTTCxHQUFULENBQTdCO0FBRUEsV0FBTyxLQUFLRyxNQUFaO0FBQ0QsR0FaRDtBQWFELENBaEJrQyxFQUFuQzs7QUFrQkE3QixVQUFVLENBQUN3QixTQUFYLENBQXFCUSxNQUFyQixHQUErQixZQUFXO0FBQ3hDLE1BQUlDLE1BQU0sR0FBRyxJQUFJckMsUUFBSixFQUFiO0FBQUEsTUFDRXNDLENBQUMsR0FBRyxJQUFJdEMsUUFBSixFQUROO0FBQUEsTUFFRXVDLENBRkY7QUFJQSxTQUFPLFVBQVNwQixRQUFULEVBQW1CO0FBQ3hCLFFBQUlDLENBQUMsR0FBR0QsUUFBUSxDQUFDRSxRQUFULENBQWtCQyxVQUFsQixDQUE2QixJQUE3QixDQUFSOztBQUVBLFFBQUlGLENBQUMsR0FBR0QsUUFBUSxDQUFDVixNQUFiLElBQXVCLEtBQUtBLE1BQWhDLEVBQXdDO0FBQ3RDNEIsTUFBQUEsTUFBTSxDQUNIRyxJQURILENBQ1FyQixRQUFRLENBQUNFLFFBRGpCLEVBRUdvQixHQUZILENBRU8sSUFGUCxFQUdHQyxTQUhIO0FBSUFKLE1BQUFBLENBQUMsQ0FBQ0UsSUFBRixDQUFPckIsUUFBUSxDQUFDd0IsUUFBaEI7QUFDQUosTUFBQUEsQ0FBQyxHQUFHLElBQUlELENBQUMsQ0FBQ00sR0FBRixDQUFNUCxNQUFOLENBQVI7QUFDQWxCLE1BQUFBLFFBQVEsQ0FBQ3dCLFFBQVQsQ0FBa0JGLEdBQWxCLENBQXNCSixNQUFNLENBQUNRLE1BQVAsQ0FBY04sQ0FBZCxDQUF0QjtBQUNEO0FBQ0YsR0FaRDtBQWFELENBbEI2QixFQUE5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBJIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBVdGlsIGZyb20gJy4uL3V0aWxzL1V0aWwnO1xuaW1wb3J0IFZlY3RvcjNEIGZyb20gJy4uL21hdGgvVmVjdG9yM0QnO1xuaW1wb3J0IFpvbmUgZnJvbSAnLi9ab25lJztcbmltcG9ydCB7IFpPTkVfVFlQRV9TUEhFUkUgYXMgdHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEEgc3BoZXJpY2FsIHpvbmUgZm9yIHBhcnRpY2xlcyB0byBiZSBlbWl0dGVkIHdpdGhpbi5cbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwaGVyZVpvbmUgZXh0ZW5kcyBab25lIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RzIHtTcGhlcmVab25lfVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2VudGVyWCAtIHRoZSBzcGhlcmUncyBjZW50ZXIgeCBjb29yZGluYXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjZW50ZXJZIC0gdGhlIHNwaGVyZSdzIGNlbnRlciB5IGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNlbnRlclogLSB0aGUgc3BoZXJlJ3MgY2VudGVyIHogY29vcmRpbmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIC0gdGhlIHNwaGVyZSdzIHJhZGl1cyB2YWx1ZVxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNlbnRlclgsIGNlbnRlclksIGNlbnRlclosIHJhZGl1cykge1xuICAgIHN1cGVyKHR5cGUpO1xuXG4gICAgLy8gVE9ETyBzZWUgYmVsb3csIHRoZXNlIHNob3VsZCBwcm9iYWJseSBiZSBhc3NpZ25lZCBwcm9wZXJseVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGxldCB4LCB5LCB6LCByO1xuXG4gICAgaWYgKFV0aWwuaXNVbmRlZmluZWQoY2VudGVyWSwgY2VudGVyWiwgcmFkaXVzKSkge1xuICAgICAgeCA9IHkgPSB6ID0gMDtcbiAgICAgIHIgPSBjZW50ZXJYIHx8IDEwMDtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IGNlbnRlclg7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHkgPSBjZW50ZXJZO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICB6ID0gY2VudGVyWjtcbiAgICAgIHIgPSByYWRpdXM7XG4gICAgfVxuXG4gICAgdGhpcy54ID0geDtcblxuICAgIC8vIFRPRE8gc2hvdWxkbid0IHRoaXMgYmUgc2V0IHRvIHk/XG4gICAgdGhpcy55ID0geDtcblxuICAgIC8vIFRPRE8gc2hvdWxkbid0IHRoaXMgYmUgc2V0IHRvIHo/XG4gICAgdGhpcy56ID0geDtcbiAgICB0aGlzLnJhZGl1cyA9IHI7XG4gICAgdGhpcy50aGUgPSB0aGlzLnBoaSA9IDA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIHRvIGluZGljYXRlIHRoaXMgaXMgYSBTcGhlcmVab25lLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNTcGhlcmVab25lKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBhcnRpY2xlIHRvIGRlYWQgaWYgdGhlIHBhcnRpY2xlIGNvbGxpZGVzIHdpdGggdGhlIHNwaGVyZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpY2xlXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgX2RlYWQocGFydGljbGUpIHtcbiAgICB2YXIgZCA9IHBhcnRpY2xlLnBvc2l0aW9uLmRpc3RhbmNlVG8odGhpcyk7XG5cbiAgICBpZiAoZCAtIHBhcnRpY2xlLnJhZGl1cyA+IHRoaXMucmFkaXVzKSBwYXJ0aWNsZS5kZWFkID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYXJucyB0aGF0IHRoaXMgem9uZSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBfY3Jvc3MgbWV0aG9kLlxuICAgKlxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIF9jcm9zcygpIHtcbiAgICBjb25zb2xlLndhcm4oYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBfY3Jvc3MgbWV0aG9kYCk7XG4gIH1cbn1cblxuU3BoZXJlWm9uZS5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0aGEsIHBoaSwgcjtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xuXG4gICAgciA9IHRoaXMucmFuZG9tICogdGhpcy5yYWRpdXM7XG4gICAgdGhhID0gUEkgKiBNYXRoLnJhbmRvbSgpOyAvL1swLXBpXVxuICAgIHBoaSA9IFBJICogMiAqIE1hdGgucmFuZG9tKCk7IC8vWzAtMnBpXVxuXG4gICAgdGhpcy52ZWN0b3IueCA9IHRoaXMueCArIHIgKiBNYXRoLnNpbih0aGEpICogTWF0aC5jb3MocGhpKTtcbiAgICB0aGlzLnZlY3Rvci55ID0gdGhpcy55ICsgciAqIE1hdGguc2luKHBoaSkgKiBNYXRoLnNpbih0aGEpO1xuICAgIHRoaXMudmVjdG9yLnogPSB0aGlzLnogKyByICogTWF0aC5jb3ModGhhKTtcblxuICAgIHJldHVybiB0aGlzLnZlY3RvcjtcbiAgfTtcbn0pKCk7XG5cblNwaGVyZVpvbmUucHJvdG90eXBlLl9ib3VuZCA9IChmdW5jdGlvbigpIHtcbiAgdmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzRCgpLFxuICAgIHYgPSBuZXcgVmVjdG9yM0QoKSxcbiAgICBrO1xuXG4gIHJldHVybiBmdW5jdGlvbihwYXJ0aWNsZSkge1xuICAgIHZhciBkID0gcGFydGljbGUucG9zaXRpb24uZGlzdGFuY2VUbyh0aGlzKTtcblxuICAgIGlmIChkICsgcGFydGljbGUucmFkaXVzID49IHRoaXMucmFkaXVzKSB7XG4gICAgICBub3JtYWxcbiAgICAgICAgLmNvcHkocGFydGljbGUucG9zaXRpb24pXG4gICAgICAgIC5zdWIodGhpcylcbiAgICAgICAgLm5vcm1hbGl6ZSgpO1xuICAgICAgdi5jb3B5KHBhcnRpY2xlLnZlbG9jaXR5KTtcbiAgICAgIGsgPSAyICogdi5kb3Qobm9ybWFsKTtcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnN1Yihub3JtYWwuc2NhbGFyKGspKTtcbiAgICB9XG4gIH07XG59KSgpO1xuIl19