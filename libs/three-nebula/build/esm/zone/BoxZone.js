import MathUtils from '../math/MathUtils';
import Util from '../utils/Util';
import Zone from './Zone';
import { ZONE_TYPE_BOX as type } from './types';
export default class BoxZone extends Zone {
  /**
   * BoxZone is a box zone
   * @param {Number|Vector3D} x - the position's x value or a Vector3D Object
   * @param {Number} y - the position's y value
   * @param {Number} z - the position's z value
   * @param {Number} w - the Box's width
   * @param {Number} h - the Box's height
   * @param {Number} d - the Box's depth
   * @example
   * var boxZone = new BoxZone(0,0,0,50,50,50);
   * or
   * var boxZone = new BoxZone(new Vector3D(0,0,0), 50, 50, 50);
   * @extends {Zone}
   * @constructor
   */
  constructor(a, b, c, d, e, f) {
    super(type); // TODO this reassigning of arguments is pretty dangerous, need to fix it.
    // eslint-disable-next-line

    var x, y, z, w, h, d;

    if (Util.isUndefined(b, c, d, e, f)) {
      x = y = z = 0;
      w = h = d = a || 100;
    } else if (Util.isUndefined(d, e, f)) {
      x = y = z = 0;
      w = a;
      h = b;
      d = c;
    } else {
      x = a;
      y = b;
      z = c;
      w = d;
      h = e;
      d = f;
    }

    this.x = x;
    this.y = y;
    this.z = z;
    this.width = w;
    this.height = h;
    this.depth = d; // TODO Set this via an argument to the constructor

    this.friction = 0.85; // TODO Set this via an argument to the constructor

    this.max = 6;
  }
  /**
   * Returns true to indicate this is a BoxZone.
   *
   * @return {boolean}
   */


  isBoxZone() {
    return true;
  }

  getPosition() {
    this.vector.x = this.x + MathUtils.randomAToB(-0.5, 0.5) * this.width;
    this.vector.y = this.y + MathUtils.randomAToB(-0.5, 0.5) * this.height;
    this.vector.z = this.z + MathUtils.randomAToB(-0.5, 0.5) * this.depth;
    return this.vector;
  }

  _dead(particle) {
    if (particle.position.x + particle.radius < this.x - this.width / 2) particle.dead = true;else if (particle.position.x - particle.radius > this.x + this.width / 2) particle.dead = true;
    if (particle.position.y + particle.radius < this.y - this.height / 2) particle.dead = true;else if (particle.position.y - particle.radius > this.y + this.height / 2) particle.dead = true;
    if (particle.position.z + particle.radius < this.z - this.depth / 2) particle.dead = true;else if (particle.position.z - particle.radius > this.z + this.depth / 2) particle.dead = true;
  }

  _bound(particle) {
    if (particle.position.x - particle.radius < this.x - this.width / 2) {
      particle.position.x = this.x - this.width / 2 + particle.radius;
      particle.velocity.x *= -this.friction;

      this._static(particle, 'x');
    } else if (particle.position.x + particle.radius > this.x + this.width / 2) {
      particle.position.x = this.x + this.width / 2 - particle.radius;
      particle.velocity.x *= -this.friction;

      this._static(particle, 'x');
    }

    if (particle.position.y - particle.radius < this.y - this.height / 2) {
      particle.position.y = this.y - this.height / 2 + particle.radius;
      particle.velocity.y *= -this.friction;

      this._static(particle, 'y');
    } else if (particle.position.y + particle.radius > this.y + this.height / 2) {
      particle.position.y = this.y + this.height / 2 - particle.radius;
      particle.velocity.y *= -this.friction;

      this._static(particle, 'y');
    }

    if (particle.position.z - particle.radius < this.z - this.depth / 2) {
      particle.position.z = this.z - this.depth / 2 + particle.radius;
      particle.velocity.z *= -this.friction;

      this._static(particle, 'z');
    } else if (particle.position.z + particle.radius > this.z + this.depth / 2) {
      particle.position.z = this.z + this.depth / 2 - particle.radius;
      particle.velocity.z *= -this.friction;

      this._static(particle, 'z');
    }
  }

  _static(particle, axis) {
    if (particle.velocity[axis] * particle.acceleration[axis] > 0) return;

    if (Math.abs(particle.velocity[axis]) < Math.abs(particle.acceleration[axis]) * 0.0167 * this.max) {
      particle.velocity[axis] = 0;
      particle.acceleration[axis] = 0;
    }
  }

  _cross(particle) {
    if (particle.position.x + particle.radius < this.x - this.width / 2 && particle.velocity.x <= 0) particle.position.x = this.x + this.width / 2 + particle.radius;else if (particle.position.x - particle.radius > this.x + this.width / 2 && particle.velocity.x >= 0) particle.position.x = this.x - this.width / 2 - particle.radius;
    if (particle.position.y + particle.radius < this.y - this.height / 2 && particle.velocity.y <= 0) particle.position.y = this.y + this.height / 2 + particle.radius;else if (particle.position.y - particle.radius > this.y + this.height / 2 && particle.velocity.y >= 0) particle.position.y = this.y - this.height / 2 - particle.radius;
    if (particle.position.z + particle.radius < this.z - this.depth / 2 && particle.velocity.z <= 0) particle.position.z = this.z + this.depth / 2 + particle.radius;else if (particle.position.z - particle.radius > this.z + this.depth / 2 && particle.velocity.z >= 0) particle.position.z = this.z - this.depth / 2 - particle.radius;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy96b25lL0JveFpvbmUuanMiXSwibmFtZXMiOlsiTWF0aFV0aWxzIiwiVXRpbCIsIlpvbmUiLCJaT05FX1RZUEVfQk9YIiwidHlwZSIsIkJveFpvbmUiLCJjb25zdHJ1Y3RvciIsImEiLCJiIiwiYyIsImQiLCJlIiwiZiIsIngiLCJ5IiwieiIsInciLCJoIiwiaXNVbmRlZmluZWQiLCJ3aWR0aCIsImhlaWdodCIsImRlcHRoIiwiZnJpY3Rpb24iLCJtYXgiLCJpc0JveFpvbmUiLCJnZXRQb3NpdGlvbiIsInZlY3RvciIsInJhbmRvbUFUb0IiLCJfZGVhZCIsInBhcnRpY2xlIiwicG9zaXRpb24iLCJyYWRpdXMiLCJkZWFkIiwiX2JvdW5kIiwidmVsb2NpdHkiLCJfc3RhdGljIiwiYXhpcyIsImFjY2VsZXJhdGlvbiIsIk1hdGgiLCJhYnMiLCJfY3Jvc3MiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFNBQVAsTUFBc0IsbUJBQXRCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixlQUFqQjtBQUNBLE9BQU9DLElBQVAsTUFBaUIsUUFBakI7QUFDQSxTQUFTQyxhQUFhLElBQUlDLElBQTFCLFFBQXNDLFNBQXRDO0FBRUEsZUFBZSxNQUFNQyxPQUFOLFNBQXNCSCxJQUF0QixDQUEyQjtBQUN4QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRUksRUFBQUEsV0FBVyxDQUFDQyxDQUFELEVBQUlDLENBQUosRUFBT0MsQ0FBUCxFQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0JDLENBQWhCLEVBQW1CO0FBQzVCLFVBQU1SLElBQU4sRUFENEIsQ0FHNUI7QUFDQTs7QUFDQSxRQUFJUyxDQUFKLEVBQU9DLENBQVAsRUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCQyxDQUFoQixFQUFtQlAsQ0FBbkI7O0FBRUEsUUFBSVQsSUFBSSxDQUFDaUIsV0FBTCxDQUFpQlYsQ0FB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S00sS0FBTCxHQUFhLENBQXRCLEdBQTBCUSxRQUFRLENBQUNFLE1BQXpEO0FBQ0g7O0FBbEt1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRoVXRpbHMgZnJvbSAnLi4vbWF0aC9NYXRoVXRpbHMnO1xuaW1wb3J0IFV0aWwgZnJvbSAnLi4vdXRpbHMvVXRpbCc7XG5pbXBvcnQgWm9uZSBmcm9tICcuL1pvbmUnO1xuaW1wb3J0IHsgWk9ORV9UWVBFX0JPWCBhcyB0eXBlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJveFpvbmUgZXh0ZW5kcyBab25lIHtcbiAgLyoqXG4gICAqIEJveFpvbmUgaXMgYSBib3ggem9uZVxuICAgKiBAcGFyYW0ge051bWJlcnxWZWN0b3IzRH0geCAtIHRoZSBwb3NpdGlvbidzIHggdmFsdWUgb3IgYSBWZWN0b3IzRCBPYmplY3RcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkgLSB0aGUgcG9zaXRpb24ncyB5IHZhbHVlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB6IC0gdGhlIHBvc2l0aW9uJ3MgeiB2YWx1ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gdyAtIHRoZSBCb3gncyB3aWR0aFxuICAgKiBAcGFyYW0ge051bWJlcn0gaCAtIHRoZSBCb3gncyBoZWlnaHRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGQgLSB0aGUgQm94J3MgZGVwdGhcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGJveFpvbmUgPSBuZXcgQm94Wm9uZSgwLDAsMCw1MCw1MCw1MCk7XG4gICAqIG9yXG4gICAqIHZhciBib3hab25lID0gbmV3IEJveFpvbmUobmV3IFZlY3RvcjNEKDAsMCwwKSwgNTAsIDUwLCA1MCk7XG4gICAqIEBleHRlbmRzIHtab25lfVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICBzdXBlcih0eXBlKTtcblxuICAgIC8vIFRPRE8gdGhpcyByZWFzc2lnbmluZyBvZiBhcmd1bWVudHMgaXMgcHJldHR5IGRhbmdlcm91cywgbmVlZCB0byBmaXggaXQuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdmFyIHgsIHksIHosIHcsIGgsIGQ7XG5cbiAgICBpZiAoVXRpbC5pc1VuZGVmaW5lZChiLCBjLCBkLCBlLCBmKSkge1xuICAgICAgeCA9IHkgPSB6ID0gMDtcbiAgICAgIHcgPSBoID0gZCA9IGEgfHwgMTAwO1xuICAgIH0gZWxzZSBpZiAoVXRpbC5pc1VuZGVmaW5lZChkLCBlLCBmKSkge1xuICAgICAgeCA9IHkgPSB6ID0gMDtcbiAgICAgIHcgPSBhO1xuICAgICAgaCA9IGI7XG4gICAgICBkID0gYztcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IGE7XG4gICAgICB5ID0gYjtcbiAgICAgIHogPSBjO1xuICAgICAgdyA9IGQ7XG4gICAgICBoID0gZTtcbiAgICAgIGQgPSBmO1xuICAgIH1cblxuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnogPSB6O1xuICAgIHRoaXMud2lkdGggPSB3O1xuICAgIHRoaXMuaGVpZ2h0ID0gaDtcbiAgICB0aGlzLmRlcHRoID0gZDtcbiAgICAvLyBUT0RPIFNldCB0aGlzIHZpYSBhbiBhcmd1bWVudCB0byB0aGUgY29uc3RydWN0b3JcbiAgICB0aGlzLmZyaWN0aW9uID0gMC44NTtcbiAgICAvLyBUT0RPIFNldCB0aGlzIHZpYSBhbiBhcmd1bWVudCB0byB0aGUgY29uc3RydWN0b3JcbiAgICB0aGlzLm1heCA9IDY7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIHRvIGluZGljYXRlIHRoaXMgaXMgYSBCb3hab25lLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNCb3hab25lKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0UG9zaXRpb24oKSB7XG4gICAgdGhpcy52ZWN0b3IueCA9IHRoaXMueCArIE1hdGhVdGlscy5yYW5kb21BVG9CKC0wLjUsIDAuNSkgKiB0aGlzLndpZHRoO1xuICAgIHRoaXMudmVjdG9yLnkgPSB0aGlzLnkgKyBNYXRoVXRpbHMucmFuZG9tQVRvQigtMC41LCAwLjUpICogdGhpcy5oZWlnaHQ7XG4gICAgdGhpcy52ZWN0b3IueiA9IHRoaXMueiArIE1hdGhVdGlscy5yYW5kb21BVG9CKC0wLjUsIDAuNSkgKiB0aGlzLmRlcHRoO1xuXG4gICAgcmV0dXJuIHRoaXMudmVjdG9yO1xuICB9XG5cbiAgX2RlYWQocGFydGljbGUpIHtcbiAgICBpZiAocGFydGljbGUucG9zaXRpb24ueCArIHBhcnRpY2xlLnJhZGl1cyA8IHRoaXMueCAtIHRoaXMud2lkdGggLyAyKVxuICAgICAgcGFydGljbGUuZGVhZCA9IHRydWU7XG4gICAgZWxzZSBpZiAocGFydGljbGUucG9zaXRpb24ueCAtIHBhcnRpY2xlLnJhZGl1cyA+IHRoaXMueCArIHRoaXMud2lkdGggLyAyKVxuICAgICAgcGFydGljbGUuZGVhZCA9IHRydWU7XG5cbiAgICBpZiAocGFydGljbGUucG9zaXRpb24ueSArIHBhcnRpY2xlLnJhZGl1cyA8IHRoaXMueSAtIHRoaXMuaGVpZ2h0IC8gMilcbiAgICAgIHBhcnRpY2xlLmRlYWQgPSB0cnVlO1xuICAgIGVsc2UgaWYgKHBhcnRpY2xlLnBvc2l0aW9uLnkgLSBwYXJ0aWNsZS5yYWRpdXMgPiB0aGlzLnkgKyB0aGlzLmhlaWdodCAvIDIpXG4gICAgICBwYXJ0aWNsZS5kZWFkID0gdHJ1ZTtcblxuICAgIGlmIChwYXJ0aWNsZS5wb3NpdGlvbi56ICsgcGFydGljbGUucmFkaXVzIDwgdGhpcy56IC0gdGhpcy5kZXB0aCAvIDIpXG4gICAgICBwYXJ0aWNsZS5kZWFkID0gdHJ1ZTtcbiAgICBlbHNlIGlmIChwYXJ0aWNsZS5wb3NpdGlvbi56IC0gcGFydGljbGUucmFkaXVzID4gdGhpcy56ICsgdGhpcy5kZXB0aCAvIDIpXG4gICAgICBwYXJ0aWNsZS5kZWFkID0gdHJ1ZTtcbiAgfVxuXG4gIF9ib3VuZChwYXJ0aWNsZSkge1xuICAgIGlmIChwYXJ0aWNsZS5wb3NpdGlvbi54IC0gcGFydGljbGUucmFkaXVzIDwgdGhpcy54IC0gdGhpcy53aWR0aCAvIDIpIHtcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSB0aGlzLnggLSB0aGlzLndpZHRoIC8gMiArIHBhcnRpY2xlLnJhZGl1cztcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnggKj0gLXRoaXMuZnJpY3Rpb247XG4gICAgICB0aGlzLl9zdGF0aWMocGFydGljbGUsICd4Jyk7XG4gICAgfSBlbHNlIGlmIChwYXJ0aWNsZS5wb3NpdGlvbi54ICsgcGFydGljbGUucmFkaXVzID4gdGhpcy54ICsgdGhpcy53aWR0aCAvIDIpIHtcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSB0aGlzLnggKyB0aGlzLndpZHRoIC8gMiAtIHBhcnRpY2xlLnJhZGl1cztcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnggKj0gLXRoaXMuZnJpY3Rpb247XG4gICAgICB0aGlzLl9zdGF0aWMocGFydGljbGUsICd4Jyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcnRpY2xlLnBvc2l0aW9uLnkgLSBwYXJ0aWNsZS5yYWRpdXMgPCB0aGlzLnkgLSB0aGlzLmhlaWdodCAvIDIpIHtcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgPSB0aGlzLnkgLSB0aGlzLmhlaWdodCAvIDIgKyBwYXJ0aWNsZS5yYWRpdXM7XG4gICAgICBwYXJ0aWNsZS52ZWxvY2l0eS55ICo9IC10aGlzLmZyaWN0aW9uO1xuICAgICAgdGhpcy5fc3RhdGljKHBhcnRpY2xlLCAneScpO1xuICAgIH0gZWxzZSBpZiAocGFydGljbGUucG9zaXRpb24ueSArIHBhcnRpY2xlLnJhZGl1cyA+IHRoaXMueSArIHRoaXMuaGVpZ2h0IC8gMikge1xuICAgICAgcGFydGljbGUucG9zaXRpb24ueSA9IHRoaXMueSArIHRoaXMuaGVpZ2h0IC8gMiAtIHBhcnRpY2xlLnJhZGl1cztcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnkgKj0gLXRoaXMuZnJpY3Rpb247XG4gICAgICB0aGlzLl9zdGF0aWMocGFydGljbGUsICd5Jyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcnRpY2xlLnBvc2l0aW9uLnogLSBwYXJ0aWNsZS5yYWRpdXMgPCB0aGlzLnogLSB0aGlzLmRlcHRoIC8gMikge1xuICAgICAgcGFydGljbGUucG9zaXRpb24ueiA9IHRoaXMueiAtIHRoaXMuZGVwdGggLyAyICsgcGFydGljbGUucmFkaXVzO1xuICAgICAgcGFydGljbGUudmVsb2NpdHkueiAqPSAtdGhpcy5mcmljdGlvbjtcbiAgICAgIHRoaXMuX3N0YXRpYyhwYXJ0aWNsZSwgJ3onKTtcbiAgICB9IGVsc2UgaWYgKHBhcnRpY2xlLnBvc2l0aW9uLnogKyBwYXJ0aWNsZS5yYWRpdXMgPiB0aGlzLnogKyB0aGlzLmRlcHRoIC8gMikge1xuICAgICAgcGFydGljbGUucG9zaXRpb24ueiA9IHRoaXMueiArIHRoaXMuZGVwdGggLyAyIC0gcGFydGljbGUucmFkaXVzO1xuICAgICAgcGFydGljbGUudmVsb2NpdHkueiAqPSAtdGhpcy5mcmljdGlvbjtcbiAgICAgIHRoaXMuX3N0YXRpYyhwYXJ0aWNsZSwgJ3onKTtcbiAgICB9XG4gIH1cblxuICBfc3RhdGljKHBhcnRpY2xlLCBheGlzKSB7XG4gICAgaWYgKHBhcnRpY2xlLnZlbG9jaXR5W2F4aXNdICogcGFydGljbGUuYWNjZWxlcmF0aW9uW2F4aXNdID4gMCkgcmV0dXJuO1xuICAgIGlmIChcbiAgICAgIE1hdGguYWJzKHBhcnRpY2xlLnZlbG9jaXR5W2F4aXNdKSA8XG4gICAgICBNYXRoLmFicyhwYXJ0aWNsZS5hY2NlbGVyYXRpb25bYXhpc10pICogMC4wMTY3ICogdGhpcy5tYXhcbiAgICApIHtcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5W2F4aXNdID0gMDtcbiAgICAgIHBhcnRpY2xlLmFjY2VsZXJhdGlvbltheGlzXSA9IDA7XG4gICAgfVxuICB9XG5cbiAgX2Nyb3NzKHBhcnRpY2xlKSB7XG4gICAgaWYgKFxuICAgICAgcGFydGljbGUucG9zaXRpb24ueCArIHBhcnRpY2xlLnJhZGl1cyA8IHRoaXMueCAtIHRoaXMud2lkdGggLyAyICYmXG4gICAgICBwYXJ0aWNsZS52ZWxvY2l0eS54IDw9IDBcbiAgICApXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi54ID0gdGhpcy54ICsgdGhpcy53aWR0aCAvIDIgKyBwYXJ0aWNsZS5yYWRpdXM7XG4gICAgZWxzZSBpZiAoXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi54IC0gcGFydGljbGUucmFkaXVzID4gdGhpcy54ICsgdGhpcy53aWR0aCAvIDIgJiZcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnggPj0gMFxuICAgIClcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSB0aGlzLnggLSB0aGlzLndpZHRoIC8gMiAtIHBhcnRpY2xlLnJhZGl1cztcblxuICAgIGlmIChcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgKyBwYXJ0aWNsZS5yYWRpdXMgPCB0aGlzLnkgLSB0aGlzLmhlaWdodCAvIDIgJiZcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnkgPD0gMFxuICAgIClcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgPSB0aGlzLnkgKyB0aGlzLmhlaWdodCAvIDIgKyBwYXJ0aWNsZS5yYWRpdXM7XG4gICAgZWxzZSBpZiAoXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi55IC0gcGFydGljbGUucmFkaXVzID4gdGhpcy55ICsgdGhpcy5oZWlnaHQgLyAyICYmXG4gICAgICBwYXJ0aWNsZS52ZWxvY2l0eS55ID49IDBcbiAgICApXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi55ID0gdGhpcy55IC0gdGhpcy5oZWlnaHQgLyAyIC0gcGFydGljbGUucmFkaXVzO1xuXG4gICAgaWYgKFxuICAgICAgcGFydGljbGUucG9zaXRpb24ueiArIHBhcnRpY2xlLnJhZGl1cyA8IHRoaXMueiAtIHRoaXMuZGVwdGggLyAyICYmXG4gICAgICBwYXJ0aWNsZS52ZWxvY2l0eS56IDw9IDBcbiAgICApXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi56ID0gdGhpcy56ICsgdGhpcy5kZXB0aCAvIDIgKyBwYXJ0aWNsZS5yYWRpdXM7XG4gICAgZWxzZSBpZiAoXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi56IC0gcGFydGljbGUucmFkaXVzID4gdGhpcy56ICsgdGhpcy5kZXB0aCAvIDIgJiZcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnogPj0gMFxuICAgIClcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnogPSB0aGlzLnogLSB0aGlzLmRlcHRoIC8gMiAtIHBhcnRpY2xlLnJhZGl1cztcbiAgfVxufVxuIl19