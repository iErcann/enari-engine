import THREEUtil from '../utils/THREEUtil';
import Vector3D from '../math/Vector3D';
import Zone from './Zone';
import { ZONE_TYPE_SCREEN as type } from './types';
export default class ScreenZone extends Zone {
  /**
   * ScreenZone is a 3d line zone
   * @param {Number|Vector3D} x1 - the line's start point of x value or a Vector3D Object
   * @param {Number|Vector3D} y1 - the line's start point of y value or a Vector3D Object
   * @param {Number} z1 - the line's start point of z value
   * @param {Number} x2 - the line's end point of x value
   * @param {Number} y2 - the line's end point of y value
   * @param {Number} z2 - the line's end point of z value
   * @example
   * var lineZone = new ScreenZone(0,0,0,100,100,0);
   * or
   * var lineZone = new ScreenZone(new Vector3D(0,0,0),new Vector3D(100,100,0));
   * @extends {Zone}
   * @constructor
   */
  constructor(camera, renderer, dis, dir) {
    super(type);
    this.camera = camera;
    this.renderer = renderer;
    this.dis = dis || 20;
    dir = dir || '1234';

    for (var i = 1; i < 5; i++) this['d' + i] = dir.indexOf(i + '') >= 0;
  }
  /**
   * Returns true to indicate this is a ScreenZone.
   *
   * @return {boolean}
   */


  isScreenZone() {
    return true;
  }

  _dead(particle) {
    var pos = THREEUtil.toScreenPos(particle.position, this.camera, this.renderer.domElement);
    var canvas = this.renderer.domElement;

    if (pos.y + particle.radius < -this.dis && this.d1) {
      particle.dead = true;
    } else if (pos.y - particle.radius > canvas.height + this.dis && this.d3) {
      particle.dead = true;
    }

    if (pos.x + particle.radius < -this.dis && this.d4) {
      particle.dead = true;
    } else if (pos.x - particle.radius > canvas.width + this.dis && this.d2) {
      particle.dead = true;
    }
  }

  _bound(particle) {
    var pos = THREEUtil.toScreenPos(particle.position, this.camera, this.renderer.domElement);
    var canvas = this.renderer.domElement;

    if (pos.y + particle.radius < -this.dis) {
      particle.velocity.y *= -1;
    } else if (pos.y - particle.radius > canvas.height + this.dis) {
      particle.velocity.y *= -1;
    }

    if (pos.x + particle.radius < -this.dis) {
      particle.velocity.y *= -1;
    } else if (pos.x - particle.radius > canvas.width + this.dis) {
      particle.velocity.y *= -1;
    }
  }

}

ScreenZone.prototype.getPosition = function () {
  var vec2 = new Vector3D(),
      canvas;
  return function () {
    canvas = this.renderer.domElement;
    vec2.x = Math.random() * canvas.width;
    vec2.y = Math.random() * canvas.height;
    this.vector.copy(THREEUtil.toSpacePos(vec2, this.camera, canvas));
    return this.vector;
  };
}();

ScreenZone.prototype._cross = function () {
  var vec2 = new Vector3D();
  return function (particle) {
    var pos = THREEUtil.toScreenPos(particle.position, this.camera, this.renderer.domElement);
    var canvas = this.renderer.domElement;

    if (pos.y + particle.radius < -this.dis) {
      vec2.x = pos.x;
      vec2.y = canvas.height + this.dis + particle.radius;
      particle.position.y = THREEUtil.toSpacePos(vec2, this.camera, canvas).y;
    } else if (pos.y - particle.radius > canvas.height + this.dis) {
      vec2.x = pos.x;
      vec2.y = -this.dis - particle.radius;
      particle.position.y = THREEUtil.toSpacePos(vec2, this.camera, canvas).y;
    }

    if (pos.x + particle.radius < -this.dis) {
      vec2.y = pos.y;
      vec2.x = canvas.width + this.dis + particle.radius;
      particle.position.x = THREEUtil.toSpacePos(vec2, this.camera, canvas).x;
    } else if (pos.x - particle.radius > canvas.width + this.dis) {
      vec2.y = pos.y;
      vec2.x = -this.dis - particle.radius;
      particle.position.x = THREEUtil.toSpacePos(vec2, this.camera, canvas).x;
    }
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy96b25lL1NjcmVlblpvbmUuanMiXSwibmFtZXMiOlsiVEhSRUVVdGlsIiwiVmVjdG9yM0QiLCJab25lIiwiWk9ORV9UWVBFX1NDUkVFTiIsInR5cGUiLCJTY3JlZW5ab25lIiwiY29uc3RydWN0b3IiLCJjYW1lcmEiLCJyZW5kZXJlciIsImRpcyIsImRpciIsImkiLCJpbmRleE9mIiwiaXNTY3JlZW5ab25lIiwiX2RlYWQiLCJwYXJ0aWNsZSIsInBvcyIsInRvU2NyZWVuUG9zIiwicG9zaXRpb24iLCJkb21FbGVtZW50IiwiY2FudmFzIiwieSIsInJhZGl1cyIsImQxIiwiZGVhZCIsImhlaWdodCIsImQzIiwieCIsImQ0Iiwid2lkdGgiLCJkMiIsIl9ib3VuZCIsInZlbG9jaXR5IiwicHJvdG90eXBlIiwiZ2V0UG9zaXRpb24iLCJ2ZWMyIiwiTWF0aCIsInJhbmRvbSIsInZlY3RvciIsImNvcHkiLCJ0b1NwYWNlUG9zIiwiX2Nyb3NzIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxTQUFQLE1BQXNCLG9CQUF0QjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsa0JBQXJCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixRQUFqQjtBQUNBLFNBQVNDLGdCQUFnQixJQUFJQyxJQUE3QixRQUF5QyxTQUF6QztBQUVBLGVBQWUsTUFBTUMsVUFBTixTQUF5QkgsSUFBekIsQ0FBOEI7QUFDM0M7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0VJLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTQyxRQUFULEVBQW1CQyxHQUFuQixFQUF3QkMsR0FBeEIsRUFBNkI7QUFDdEMsVUFBTU4sSUFBTjtBQUVBLFNBQUtHLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0MsR0FBTCxHQUFXQSxHQUFHLElBQUksRUFBbEI7QUFDQUMsSUFB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QVQsQ0FBa0JTLENBQWxCLEdBQXNCM0IsU0FBUyxDQUFDd0MsVUFBVixDQUFxQkwsSUFBckIsRUFBMkIsS0FBSzVCLE1BQWhDLEVBQXdDYSxNQUF4QyxFQUFnRE8sQ0FBdEU7QUFDRCxLQUpELE1BSU8sSUFBSVgsR0FBRyxDQUFDVyxDQUFKLEdBQVFaLFFBQVEsQ0FBQ08sTUFBakIsR0FBMEJGLE1BQU0sQ0FBQ1MsS0FBUCxHQUFlLEtBQUtwQixHQUFsRCxFQUF1RDtBQUM1RDBCLE1BQUFBLElBQUksQ0FBQ2QsQ0FBTCxHQUFTTCxHQUFHLENBQUNLLENBQWI7QUFDQWMsTUFBQUEsSUFBSSxDQUFDUixDQUFMLEdBQVMsQ0FBQyxLQUFLbEIsR0FBTixHQUFZTSxRQUFRLENBQUNPLE1BQTlCO0FBQ0FQLE1BQUFBLFFBQVEsQ0FBQ0csUUFBVCxDQUFrQlMsQ0FBbEIsR0FBc0IzQixTQUFTLENBQUN3QyxVQUFWLENBQXFCTCxJQUFyQixFQUEyQixLQUFLNUIsTUFBaEMsRUFBd0NhLE1BQXhDLEVBQWdETyxDQUF0RTtBQUNEO0FBQ0YsR0EzQkQ7QUE0QkQsQ0EvQjZCLEVBQTlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRIUkVFVXRpbCBmcm9tICcuLi91dGlscy9USFJFRVV0aWwnO1xuaW1wb3J0IFZlY3RvcjNEIGZyb20gJy4uL21hdGgvVmVjdG9yM0QnO1xuaW1wb3J0IFpvbmUgZnJvbSAnLi9ab25lJztcbmltcG9ydCB7IFpPTkVfVFlQRV9TQ1JFRU4gYXMgdHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JlZW5ab25lIGV4dGVuZHMgWm9uZSB7XG4gIC8qKlxuICAgKiBTY3JlZW5ab25lIGlzIGEgM2QgbGluZSB6b25lXG4gICAqIEBwYXJhbSB7TnVtYmVyfFZlY3RvcjNEfSB4MSAtIHRoZSBsaW5lJ3Mgc3RhcnQgcG9pbnQgb2YgeCB2YWx1ZSBvciBhIFZlY3RvcjNEIE9iamVjdFxuICAgKiBAcGFyYW0ge051bWJlcnxWZWN0b3IzRH0geTEgLSB0aGUgbGluZSdzIHN0YXJ0IHBvaW50IG9mIHkgdmFsdWUgb3IgYSBWZWN0b3IzRCBPYmplY3RcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHoxIC0gdGhlIGxpbmUncyBzdGFydCBwb2ludCBvZiB6IHZhbHVlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4MiAtIHRoZSBsaW5lJ3MgZW5kIHBvaW50IG9mIHggdmFsdWVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkyIC0gdGhlIGxpbmUncyBlbmQgcG9pbnQgb2YgeSB2YWx1ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gejIgLSB0aGUgbGluZSdzIGVuZCBwb2ludCBvZiB6IHZhbHVlXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBsaW5lWm9uZSA9IG5ldyBTY3JlZW5ab25lKDAsMCwwLDEwMCwxMDAsMCk7XG4gICAqIG9yXG4gICAqIHZhciBsaW5lWm9uZSA9IG5ldyBTY3JlZW5ab25lKG5ldyBWZWN0b3IzRCgwLDAsMCksbmV3IFZlY3RvcjNEKDEwMCwxMDAsMCkpO1xuICAgKiBAZXh0ZW5kcyB7Wm9uZX1cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjYW1lcmEsIHJlbmRlcmVyLCBkaXMsIGRpcikge1xuICAgIHN1cGVyKHR5cGUpO1xuXG4gICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuZGlzID0gZGlzIHx8IDIwO1xuICAgIGRpciA9IGRpciB8fCAnMTIzNCc7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IDU7IGkrKykgdGhpc1snZCcgKyBpXSA9IGRpci5pbmRleE9mKGkgKyAnJykgPj0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgdG8gaW5kaWNhdGUgdGhpcyBpcyBhIFNjcmVlblpvbmUuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc1NjcmVlblpvbmUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBfZGVhZChwYXJ0aWNsZSkge1xuICAgIHZhciBwb3MgPSBUSFJFRVV0aWwudG9TY3JlZW5Qb3MoXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbixcbiAgICAgIHRoaXMuY2FtZXJhLFxuICAgICAgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50XG4gICAgKTtcbiAgICB2YXIgY2FudmFzID0gdGhpcy5yZW5kZXJlci5kb21FbGVtZW50O1xuXG4gICAgaWYgKHBvcy55ICsgcGFydGljbGUucmFkaXVzIDwgLXRoaXMuZGlzICYmIHRoaXMuZDEpIHtcbiAgICAgIHBhcnRpY2xlLmRlYWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAocG9zLnkgLSBwYXJ0aWNsZS5yYWRpdXMgPiBjYW52YXMuaGVpZ2h0ICsgdGhpcy5kaXMgJiYgdGhpcy5kMykge1xuICAgICAgcGFydGljbGUuZGVhZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHBvcy54ICsgcGFydGljbGUucmFkaXVzIDwgLXRoaXMuZGlzICYmIHRoaXMuZDQpIHtcbiAgICAgIHBhcnRpY2xlLmRlYWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAocG9zLnggLSBwYXJ0aWNsZS5yYWRpdXMgPiBjYW52YXMud2lkdGggKyB0aGlzLmRpcyAmJiB0aGlzLmQyKSB7XG4gICAgICBwYXJ0aWNsZS5kZWFkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBfYm91bmQocGFydGljbGUpIHtcbiAgICB2YXIgcG9zID0gVEhSRUVVdGlsLnRvU2NyZWVuUG9zKFxuICAgICAgcGFydGljbGUucG9zaXRpb24sXG4gICAgICB0aGlzLmNhbWVyYSxcbiAgICAgIHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudFxuICAgICk7XG4gICAgdmFyIGNhbnZhcyA9IHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudDtcblxuICAgIGlmIChwb3MueSArIHBhcnRpY2xlLnJhZGl1cyA8IC10aGlzLmRpcykge1xuICAgICAgcGFydGljbGUudmVsb2NpdHkueSAqPSAtMTtcbiAgICB9IGVsc2UgaWYgKHBvcy55IC0gcGFydGljbGUucmFkaXVzID4gY2FudmFzLmhlaWdodCArIHRoaXMuZGlzKSB7XG4gICAgICBwYXJ0aWNsZS52ZWxvY2l0eS55ICo9IC0xO1xuICAgIH1cblxuICAgIGlmIChwb3MueCArIHBhcnRpY2xlLnJhZGl1cyA8IC10aGlzLmRpcykge1xuICAgICAgcGFydGljbGUudmVsb2NpdHkueSAqPSAtMTtcbiAgICB9IGVsc2UgaWYgKHBvcy54IC0gcGFydGljbGUucmFkaXVzID4gY2FudmFzLndpZHRoICsgdGhpcy5kaXMpIHtcbiAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnkgKj0gLTE7XG4gICAgfVxuICB9XG59XG5cblNjcmVlblpvbmUucHJvdG90eXBlLmdldFBvc2l0aW9uID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdmVjMiA9IG5ldyBWZWN0b3IzRCgpLFxuICAgIGNhbnZhcztcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2FudmFzID0gdGhpcy5yZW5kZXJlci5kb21FbGVtZW50O1xuICAgIHZlYzIueCA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGg7XG4gICAgdmVjMi55ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy5oZWlnaHQ7XG4gICAgdGhpcy52ZWN0b3IuY29weShUSFJFRVV0aWwudG9TcGFjZVBvcyh2ZWMyLCB0aGlzLmNhbWVyYSwgY2FudmFzKSk7XG5cbiAgICByZXR1cm4gdGhpcy52ZWN0b3I7XG4gIH07XG59KSgpO1xuXG5TY3JlZW5ab25lLnByb3RvdHlwZS5fY3Jvc3MgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB2ZWMyID0gbmV3IFZlY3RvcjNEKCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHBhcnRpY2xlKSB7XG4gICAgdmFyIHBvcyA9IFRIUkVFVXRpbC50b1NjcmVlblBvcyhcbiAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLFxuICAgICAgdGhpcy5jYW1lcmEsXG4gICAgICB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnRcbiAgICApO1xuICAgIHZhciBjYW52YXMgPSB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQ7XG5cbiAgICBpZiAocG9zLnkgKyBwYXJ0aWNsZS5yYWRpdXMgPCAtdGhpcy5kaXMpIHtcbiAgICAgIHZlYzIueCA9IHBvcy54O1xuICAgICAgdmVjMi55ID0gY2FudmFzLmhlaWdodCArIHRoaXMuZGlzICsgcGFydGljbGUucmFkaXVzO1xuICAgICAgcGFydGljbGUucG9zaXRpb24ueSA9IFRIUkVFVXRpbC50b1NwYWNlUG9zKHZlYzIsIHRoaXMuY2FtZXJhLCBjYW52YXMpLnk7XG4gICAgfSBlbHNlIGlmIChwb3MueSAtIHBhcnRpY2xlLnJhZGl1cyA+IGNhbnZhcy5oZWlnaHQgKyB0aGlzLmRpcykge1xuICAgICAgdmVjMi54ID0gcG9zLng7XG4gICAgICB2ZWMyLnkgPSAtdGhpcy5kaXMgLSBwYXJ0aWNsZS5yYWRpdXM7XG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi55ID0gVEhSRUVVdGlsLnRvU3BhY2VQb3ModmVjMiwgdGhpcy5jYW1lcmEsIGNhbnZhcykueTtcbiAgICB9XG5cbiAgICBpZiAocG9zLnggKyBwYXJ0aWNsZS5yYWRpdXMgPCAtdGhpcy5kaXMpIHtcbiAgICAgIHZlYzIueSA9IHBvcy55O1xuICAgICAgdmVjMi54ID0gY2FudmFzLndpZHRoICsgdGhpcy5kaXMgKyBwYXJ0aWNsZS5yYWRpdXM7XG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi54ID0gVEhSRUVVdGlsLnRvU3BhY2VQb3ModmVjMiwgdGhpcy5jYW1lcmEsIGNhbnZhcykueDtcbiAgICB9IGVsc2UgaWYgKHBvcy54IC0gcGFydGljbGUucmFkaXVzID4gY2FudmFzLndpZHRoICsgdGhpcy5kaXMpIHtcbiAgICAgIHZlYzIueSA9IHBvcy55O1xuICAgICAgdmVjMi54ID0gLXRoaXMuZGlzIC0gcGFydGljbGUucmFkaXVzO1xuICAgICAgcGFydGljbGUucG9zaXRpb24ueCA9IFRIUkVFVXRpbC50b1NwYWNlUG9zKHZlYzIsIHRoaXMuY2FtZXJhLCBjYW52YXMpLng7XG4gICAgfVxuICB9O1xufSkoKTtcbiJdfQ==