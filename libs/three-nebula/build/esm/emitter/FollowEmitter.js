import Emitter from './Emitter';
import THREEUtil from '../utils/THREEUtil';
import Util from '../utils/Util';
import { EMITTER_TYPE_FOLLOW as type } from './types';
export default class FollowEmitter extends Emitter {
  /**
   * The FollowEmitter class inherits from System.Emitter
   *
   * use the FollowEmitter will emit particle when mousemoving
   *
   * @class System.FollowEmitter
   * @constructor
   * @param {Element} mouseTarget mouseevent's target;
   * @param {Number} ease the easing of following speed;
   * @default 0.7
   * @param {Object} pObj the parameters object;
   */
  constructor(mouseTarget, ease, pObj) {
    super(pObj);
    /**
     * @desc The class type.
     * @type {string}
     */

    this.type = type;
    this.mouseTarget = Util.initValue(mouseTarget, window);
    this.ease = Util.initValue(ease, 0.7);
    this._allowEmitting = false;
    this.initEventHandler();
  }

  initEventHandler() {
    var self = this;

    this.mousemoveHandler = function (e) {
      self.mousemove.call(self, e);
    };

    this.mousedownHandler = function (e) {
      self.mousedown.call(self, e);
    };

    this.mouseupHandler = function (e) {
      self.mouseup.call(self, e);
    };

    this.mouseTarget.addEventListener('mousemove', this.mousemoveHandler, false);
  }
  /**
   * start emit particle
   * @method emit
   */


  emit() {
    this._allowEmitting = true;
  }
  /**
   * stop emiting
   * @method stopEmit
   */


  stopEmit() {
    this._allowEmitting = false;
  }

  setCameraAndCanvas(camera, canvas) {
    this.camera = camera;
    this.canvas = canvas;
  }

  mousemove(e) {
    if (e.layerX || e.layerX == 0) {
      this.position.x += (e.layerX - this.position.x) * this.ease;
      this.position.y += (e.layerY - this.position.y) * this.ease;
    } else if (e.offsetX || e.offsetX == 0) {
      this.position.x += (e.offsetX - this.position.x) * this.ease;
      this.position.y += (e.offsetY - this.position.y) * this.ease;
    }

    this.position.copy(THREEUtil.toSpacePos(this.position, this.camera, this.canvas));
    if (this._allowEmitting) super.emit('once');
  }
  /**
   * Destory this Emitter
   * @method destroy
   */


  destroy() {
    super.destroy();
    this.mouseTarget.removeEventListener('mousemove', this.mousemoveHandler, false);
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lbWl0dGVyL0ZvbGxvd0VtaXR0ZXIuanMiXSwibmFtZXMiOlsiRW1pdHRlciIsIlRIUkVFVXRpbCIsIlV0aWwiLCJFTUlUVEVSX1RZUEVfRk9MTE9XIiwidHlwZSIsIkZvbGxvd0VtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsIm1vdXNlVGFyZ2V0IiwiZWFzZSIsInBPYmoiLCJpbml0VmFsdWUiLCJ3aW5kb3ciLCJfYWxsb3dFbWl0dGluZyIsImluaXRFdmVudEhhbmRsZXIiLCJzZWxmIiwibW91c2Vtb3ZlSGFuZGxlciIsImUiLCJtb3VzZW1vdmUiLCJjYWxsIiwibW91c2Vkb3duSGFuZGxlciIsIm1vdXNlZG93biIsIm1vdXNldXBIYW5kbGVyIiwibW91c2V1cCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbWl0Iiwic3RvcEVtaXQiLCJzZXRDYW1lcmFBbmRDYW52YXMiLCJjYW1lcmEiLCJjYW52YXMiLCJsYXllclgiLCJwb3NpdGlvbiIsIngiLCJ5IiwibGF5ZXJZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJjb3B5IiwidG9TcGFjZVBvcyIsImRlc3Ryb3kiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxPQUFQLE1BQW9CLFdBQXBCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixvQkFBdEI7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLGVBQWpCO0FBQ0EsU0FBU0MsbUJBQW1CLElBQUlDLElBQWhDLFFBQTRDLFNBQTVDO0FBRUEsZUFBZSxNQUFNQyxhQUFOLFNBQTRCTCxPQUE1QixDQUFvQztBQUNqRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRU0sRUFBQUEsV0FBVyxDQUFDQyxXQUFELEVBQWNDLElBQWQsRUFBb0JDLElBQXBCLEVBQTBCO0FBQ25DLFVBQU1BLElBQU47QUFFQTtBQUNKO0FBQ0E7QUFDQTs7QUFDSSxTQUFLTCxJQUFMLEdBQVlBLElB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QUt4QixnQkFGUCxFQUdFLEtBSEY7QUFLRDs7QUFqR2dEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVtaXR0ZXIgZnJvbSAnLi9FbWl0dGVyJztcbmltcG9ydCBUSFJFRVV0aWwgZnJvbSAnLi4vdXRpbHMvVEhSRUVVdGlsJztcbmltcG9ydCBVdGlsIGZyb20gJy4uL3V0aWxzL1V0aWwnO1xuaW1wb3J0IHsgRU1JVFRFUl9UWVBFX0ZPTExPVyBhcyB0eXBlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvbGxvd0VtaXR0ZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgLyoqXG4gICAqIFRoZSBGb2xsb3dFbWl0dGVyIGNsYXNzIGluaGVyaXRzIGZyb20gU3lzdGVtLkVtaXR0ZXJcbiAgICpcbiAgICogdXNlIHRoZSBGb2xsb3dFbWl0dGVyIHdpbGwgZW1pdCBwYXJ0aWNsZSB3aGVuIG1vdXNlbW92aW5nXG4gICAqXG4gICAqIEBjbGFzcyBTeXN0ZW0uRm9sbG93RW1pdHRlclxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtFbGVtZW50fSBtb3VzZVRhcmdldCBtb3VzZWV2ZW50J3MgdGFyZ2V0O1xuICAgKiBAcGFyYW0ge051bWJlcn0gZWFzZSB0aGUgZWFzaW5nIG9mIGZvbGxvd2luZyBzcGVlZDtcbiAgICogQGRlZmF1bHQgMC43XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwT2JqIHRoZSBwYXJhbWV0ZXJzIG9iamVjdDtcbiAgICovXG4gIGNvbnN0cnVjdG9yKG1vdXNlVGFyZ2V0LCBlYXNlLCBwT2JqKSB7XG4gICAgc3VwZXIocE9iaik7XG5cbiAgICAvKipcbiAgICAgKiBAZGVzYyBUaGUgY2xhc3MgdHlwZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5tb3VzZVRhcmdldCA9IFV0aWwuaW5pdFZhbHVlKG1vdXNlVGFyZ2V0LCB3aW5kb3cpO1xuICAgIHRoaXMuZWFzZSA9IFV0aWwuaW5pdFZhbHVlKGVhc2UsIDAuNyk7XG4gICAgdGhpcy5fYWxsb3dFbWl0dGluZyA9IGZhbHNlO1xuICAgIHRoaXMuaW5pdEV2ZW50SGFuZGxlcigpO1xuICB9XG5cbiAgaW5pdEV2ZW50SGFuZGxlcigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLm1vdXNlbW92ZUhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLm1vdXNlbW92ZS5jYWxsKHNlbGYsIGUpO1xuICAgIH07XG5cbiAgICB0aGlzLm1vdXNlZG93bkhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLm1vdXNlZG93bi5jYWxsKHNlbGYsIGUpO1xuICAgIH07XG5cbiAgICB0aGlzLm1vdXNldXBIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5tb3VzZXVwLmNhbGwoc2VsZiwgZSk7XG4gICAgfTtcblxuICAgIHRoaXMubW91c2VUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgdGhpcy5tb3VzZW1vdmVIYW5kbGVyLFxuICAgICAgZmFsc2VcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0YXJ0IGVtaXQgcGFydGljbGVcbiAgICogQG1ldGhvZCBlbWl0XG4gICAqL1xuICBlbWl0KCkge1xuICAgIHRoaXMuX2FsbG93RW1pdHRpbmcgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0b3AgZW1pdGluZ1xuICAgKiBAbWV0aG9kIHN0b3BFbWl0XG4gICAqL1xuICBzdG9wRW1pdCgpIHtcbiAgICB0aGlzLl9hbGxvd0VtaXR0aW5nID0gZmFsc2U7XG4gIH1cblxuICBzZXRDYW1lcmFBbmRDYW52YXMoY2FtZXJhLCBjYW52YXMpIHtcbiAgICB0aGlzLmNhbWVyYSA9IGNhbWVyYTtcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgfVxuXG4gIG1vdXNlbW92ZShlKSB7XG4gICAgaWYgKGUubGF5ZXJYIHx8IGUubGF5ZXJYID09IDApIHtcbiAgICAgIHRoaXMucG9zaXRpb24ueCArPSAoZS5sYXllclggLSB0aGlzLnBvc2l0aW9uLngpICogdGhpcy5lYXNlO1xuICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IChlLmxheWVyWSAtIHRoaXMucG9zaXRpb24ueSkgKiB0aGlzLmVhc2U7XG4gICAgfSBlbHNlIGlmIChlLm9mZnNldFggfHwgZS5vZmZzZXRYID09IDApIHtcbiAgICAgIHRoaXMucG9zaXRpb24ueCArPSAoZS5vZmZzZXRYIC0gdGhpcy5wb3NpdGlvbi54KSAqIHRoaXMuZWFzZTtcbiAgICAgIHRoaXMucG9zaXRpb24ueSArPSAoZS5vZmZzZXRZIC0gdGhpcy5wb3NpdGlvbi55KSAqIHRoaXMuZWFzZTtcbiAgICB9XG5cbiAgICB0aGlzLnBvc2l0aW9uLmNvcHkoXG4gICAgICBUSFJFRVV0aWwudG9TcGFjZVBvcyh0aGlzLnBvc2l0aW9uLCB0aGlzLmNhbWVyYSwgdGhpcy5jYW52YXMpXG4gICAgKTtcblxuICAgIGlmICh0aGlzLl9hbGxvd0VtaXR0aW5nKSBzdXBlci5lbWl0KCdvbmNlJyk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdG9yeSB0aGlzIEVtaXR0ZXJcbiAgICogQG1ldGhvZCBkZXN0cm95XG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLm1vdXNlVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAnbW91c2Vtb3ZlJyxcbiAgICAgIHRoaXMubW91c2Vtb3ZlSGFuZGxlcixcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgfVxufVxuIl19