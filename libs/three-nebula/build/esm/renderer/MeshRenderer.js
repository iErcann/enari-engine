import BaseRenderer from './BaseRenderer';
import { PUID } from '../utils';
import { Pool } from '../core';
import { RENDERER_TYPE_MESH as type } from './types';
/**
 * @requires THREE - { Mesh, BoxGeometry, MeshLambertMaterial }
 */

export default class MeshRenderer extends BaseRenderer {
  /**
   * @param {object} container - An Object3D container, usually a THREE.Scene
   * @param {object} THREE - THREE Api
   */
  constructor(container, THREE) {
    super(type);
    this.container = container;
    this._targetPool = new Pool();
    this._materialPool = new Pool();
    this._body = new THREE.Mesh(new THREE.BoxGeometry(50, 50, 50), new THREE.MeshLambertMaterial({
      color: '#ff0000'
    }));
  }

  isThreeSprite(particle) {
    return particle.target.isSprite;
  }

  onSystemUpdate() {}

  onParticleCreated(particle) {
    if (!particle.target) {
      //set target
      if (!particle.body) particle.body = this._body;
      particle.target = this._targetPool.get(particle.body); //set material

      if (particle.useAlpha || particle.useColor) {
        particle.target.material.__puid = PUID.id(particle.body.material);
        particle.target.material = this._materialPool.get(particle.target.material);
      }
    }

    if (particle.target) {
      particle.target.position.copy(particle.position);
      this.container.add(particle.target);
    }
  }

  onParticleUpdate(particle) {
    const {
      target,
      useAlpha,
      useColor,
      rotation
    } = particle;

    if (!target) {
      return;
    }

    target.position.copy(particle.position);

    if (!this.isThreeSprite(particle)) {
      target.rotation.set(rotation.x, rotation.y, rotation.z);
    }

    this.scale(particle);

    if (useAlpha) {
      target.material.opacity = particle.alpha;
      target.material.transparent = true;
    }

    if (useColor) {
      target.material.color.copy(particle.color);
    }
  }

  scale(particle) {
    particle.target.scale.set(particle.scale, particle.scale, particle.scale);
  }

  onParticleDead(particle) {
    if (particle.target) {
      if (particle.useAlpha || particle.useColor) this._materialPool.expire(particle.target.material);

      this._targetPool.expire(particle.target);

      this.container.remove(particle.target);
      particle.target = null;
    }
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZW5kZXJlci9NZXNoUmVuZGVyZXIuanMiXSwibmFtZXMiOlsiQmFzZVJlbmRlcmVyIiwiUFVJRCIsIlBvb2wiLCJSRU5ERVJFUl9UWVBFX01FU0giLCJ0eXBlIiwiTWVzaFJlbmRlcmVyIiwiY29uc3RydWN0b3IiLCJjb250YWluZXIiLCJUSFJFRSIsIl90YXJnZXRQb29sIiwiX21hdGVyaWFsUG9vbCIsIl9ib2R5IiwiTWVzaCIsIkJveEdlb21ldHJ5IiwiTWVzaExhbWJlcnRNYXRlcmlhbCIsImNvbG9yIiwiaXNUaHJlZVNwcml0ZSIsInBhcnRpY2xlIiwidGFyZ2V0IiwiaXNTcHJpdGUiLCJvblN5c3RlbVVwZGF0ZSIsIm9uUGFydGljbGVDcmVhdGVkIiwiYm9keSIsImdldCIsInVzZUFscGhhIiwidXNlQ29sb3IiLCJtYXRlcmlhbCIsIl9fcHVpZCIsImlkIiwicG9zaXRpb24iLCJjb3B5IiwiYWRkIiwib25QYXJ0aWNsZVVwZGF0ZSIsInJvdGF0aW9uIiwic2V0IiwieCIsInkiLCJ6Iiwic2NhbGUiLCJvcGFjaXR5IiwiYWxwaGEiLCJ0cmFuc3BhcmVudCIsIm9uUGFydGljbGVEZWFkIiwiZXhwaXJlIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxZQUFQLE1BQXlCLGdCQUF6QjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsVUFBckI7QUFDQSxTQUFTQyxJQUFULFFBQXFCLFNBQXJCO0FBQ0EsU0FBU0Msa0JBQWtCLElBQUlDLElBQS9CLFFBQTJDLFNBQTNDO0FBRUE7QUFDQTtBQUNBOztBQUNBLGVBQWUsTUFBTUMsWUFBTixTQUEyQkwsWUFBM0IsQ0FBd0M7QUFDckQ7QUFDRjtBQUNBO0FBQ0E7QUFDRU0sRUFBQUEsV0FBVyxDQUFDQyxTQUFELEVBQVlDLEtBQVosRUFBbUI7QUFDNUIsVUFBTUosSUFBTjtBQUVBLFNBQUtHLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBS0UsV0FBTCxHQUFtQixJQUFJUCxJQUFK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UUFBRCxFQUFXO0FBQ2RBLElBQUFBLFFBQVEsQ0FBQ0MsTUFBVCxDQUFnQm9CLEtBQWhCLENBQXNCSixHQUF0QixDQUEwQmpCLFFBQVEsQ0FBQ3FCLEtBQW5DLEVBQTBDckIsUUFBUSxDQUFDcUIsS0FBbkQsRUFBMERyQixRQUFRLENBQUNxQixLQUFuRTtBQUNEOztBQUVESSxFQUFBQSxjQUFjLENBQUN6QixRQUFELEVBQVc7QUFDdkIsUUFBSUEsUUFBUSxDQUFDQyxNQUFiLEVBQXFCO0FBQ25CLFVBQUlELFFBQVEsQ0FBQ08sUUFBVCxJQUFxQlAsUUFBUSxDQUFDUSxRQUFsQyxFQUNFLEtBQUtmLGFBQUwsQ0FBbUJpQyxNQUFuQixDQUEwQjFCLFFBQVEsQ0FBQ0MsTUFBVCxDQUFnQlEsUUFBMUM7O0FBRUYsV0FBS2pCLFdBQUwsQ0FBaUJrQyxNQUFqQixDQUF3QjFCLFFBQVEsQ0FBQ0MsTUFBakM7O0FBQ0EsV0FBS1gsU0FBTCxDQUFlcUMsTUFBZixDQUFzQjNCLFFBQVEsQ0FBQ0MsTUFBL0I7QUFDQUQsTUFBQUEsUUFBUSxDQUFDQyxNQUFULEdBQWtCLElBQWxCO0FBQ0Q7QUFDRjs7QUFsRm9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2VSZW5kZXJlciBmcm9tICcuL0Jhc2VSZW5kZXJlcic7XG5pbXBvcnQgeyBQVUlEIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgUG9vbCB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHsgUkVOREVSRVJfVFlQRV9NRVNIIGFzIHR5cGUgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBAcmVxdWlyZXMgVEhSRUUgLSB7IE1lc2gsIEJveEdlb21ldHJ5LCBNZXNoTGFtYmVydE1hdGVyaWFsIH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVzaFJlbmRlcmVyIGV4dGVuZHMgQmFzZVJlbmRlcmVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250YWluZXIgLSBBbiBPYmplY3QzRCBjb250YWluZXIsIHVzdWFsbHkgYSBUSFJFRS5TY2VuZVxuICAgKiBAcGFyYW0ge29iamVjdH0gVEhSRUUgLSBUSFJFRSBBcGlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgVEhSRUUpIHtcbiAgICBzdXBlcih0eXBlKTtcblxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuX3RhcmdldFBvb2wgPSBuZXcgUG9vbCgpO1xuICAgIHRoaXMuX21hdGVyaWFsUG9vbCA9IG5ldyBQb29sKCk7XG4gICAgdGhpcy5fYm9keSA9IG5ldyBUSFJFRS5NZXNoKFxuICAgICAgbmV3IFRIUkVFLkJveEdlb21ldHJ5KDUwLCA1MCwgNTApLFxuICAgICAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogJyNmZjAwMDAnIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlzVGhyZWVTcHJpdGUocGFydGljbGUpIHtcbiAgICByZXR1cm4gcGFydGljbGUudGFyZ2V0LmlzU3ByaXRlO1xuICB9XG5cbiAgb25TeXN0ZW1VcGRhdGUoKSB7fVxuXG4gIG9uUGFydGljbGVDcmVhdGVkKHBhcnRpY2xlKSB7XG4gICAgaWYgKCFwYXJ0aWNsZS50YXJnZXQpIHtcbiAgICAgIC8vc2V0IHRhcmdldFxuICAgICAgaWYgKCFwYXJ0aWNsZS5ib2R5KSBwYXJ0aWNsZS5ib2R5ID0gdGhpcy5fYm9keTtcbiAgICAgIHBhcnRpY2xlLnRhcmdldCA9IHRoaXMuX3RhcmdldFBvb2wuZ2V0KHBhcnRpY2xlLmJvZHkpO1xuXG4gICAgICAvL3NldCBtYXRlcmlhbFxuICAgICAgaWYgKHBhcnRpY2xlLnVzZUFscGhhIHx8IHBhcnRpY2xlLnVzZUNvbG9yKSB7XG4gICAgICAgIHBhcnRpY2xlLnRhcmdldC5tYXRlcmlhbC5fX3B1aWQgPSBQVUlELmlkKHBhcnRpY2xlLmJvZHkubWF0ZXJpYWwpO1xuICAgICAgICBwYXJ0aWNsZS50YXJnZXQubWF0ZXJpYWwgPSB0aGlzLl9tYXRlcmlhbFBvb2wuZ2V0KFxuICAgICAgICAgIHBhcnRpY2xlLnRhcmdldC5tYXRlcmlhbFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJ0aWNsZS50YXJnZXQpIHtcbiAgICAgIHBhcnRpY2xlLnRhcmdldC5wb3NpdGlvbi5jb3B5KHBhcnRpY2xlLnBvc2l0aW9uKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFkZChwYXJ0aWNsZS50YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIG9uUGFydGljbGVVcGRhdGUocGFydGljbGUpIHtcbiAgICBjb25zdCB7IHRhcmdldCwgdXNlQWxwaGEsIHVzZUNvbG9yLCByb3RhdGlvbiB9ID0gcGFydGljbGU7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRhcmdldC5wb3NpdGlvbi5jb3B5KHBhcnRpY2xlLnBvc2l0aW9uKTtcblxuICAgIGlmICghdGhpcy5pc1RocmVlU3ByaXRlKHBhcnRpY2xlKSkge1xuICAgICAgdGFyZ2V0LnJvdGF0aW9uLnNldChyb3RhdGlvbi54LCByb3RhdGlvbi55LCByb3RhdGlvbi56KTtcbiAgICB9XG5cbiAgICB0aGlzLnNjYWxlKHBhcnRpY2xlKTtcblxuICAgIGlmICh1c2VBbHBoYSkge1xuICAgICAgdGFyZ2V0Lm1hdGVyaWFsLm9wYWNpdHkgPSBwYXJ0aWNsZS5hbHBoYTtcbiAgICAgIHRhcmdldC5tYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHVzZUNvbG9yKSB7XG4gICAgICB0YXJnZXQubWF0ZXJpYWwuY29sb3IuY29weShwYXJ0aWNsZS5jb2xvcik7XG4gICAgfVxuICB9XG5cbiAgc2NhbGUocGFydGljbGUpIHtcbiAgICBwYXJ0aWNsZS50YXJnZXQuc2NhbGUuc2V0KHBhcnRpY2xlLnNjYWxlLCBwYXJ0aWNsZS5zY2FsZSwgcGFydGljbGUuc2NhbGUpO1xuICB9XG5cbiAgb25QYXJ0aWNsZURlYWQocGFydGljbGUpIHtcbiAgICBpZiAocGFydGljbGUudGFyZ2V0KSB7XG4gICAgICBpZiAocGFydGljbGUudXNlQWxwaGEgfHwgcGFydGljbGUudXNlQ29sb3IpXG4gICAgICAgIHRoaXMuX21hdGVyaWFsUG9vbC5leHBpcmUocGFydGljbGUudGFyZ2V0Lm1hdGVyaWFsKTtcblxuICAgICAgdGhpcy5fdGFyZ2V0UG9vbC5leHBpcmUocGFydGljbGUudGFyZ2V0KTtcbiAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZShwYXJ0aWNsZS50YXJnZXQpO1xuICAgICAgcGFydGljbGUudGFyZ2V0ID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==