"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vector3 = Vector3;

var _Math2 = require("./Math.js");

var _Quaternion = require("./Quaternion.js");

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */
function Vector3(x, y, z) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
}

Object.assign(Vector3.prototype, {
  isVector3: true,
  set: function set(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  },
  setScalar: function setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    return this;
  },
  setX: function setX(x) {
    this.x = x;
    return this;
  },
  setY: function setY(y) {
    this.y = y;
    return this;
  },
  setZ: function setZ(z) {
    this.z = z;
    return this;
  },
  setComponent: function setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;

      case 1:
        this.y = value;
        break;

      case 2:
        this.z = value;
        break;

      default:
        throw new Error('index is out of range: ' + index);
    }

    return this;
  },
  getComponent: function getComponent(index) {
    switch (index) {
      case 0:
        return this.x;

      case 1:
        return this.y;

      case 2:
        return this.z;

      default:
        throw new Error('index is out of range: ' + index);
    }
  },
  clone: function clone() {
    return new this.constructor(this.x, this.y, this.z);
  },
  copy: function copy(v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    return this;
  },
  add: function add(v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
      return this.addVectors(v, w);
    }

    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
  },
  addScalar: function addScalar(s) {
    this.x += s;
    this.y += s;
    this.z += s;
    return this;
  },
  addVectors: function addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    return this;
  },
  addScaledVector: function addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    this.z += v.z * s;
    return this;
  },
  sub: function sub(v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
      return this.subVectors(v, w);
    }

    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
  },
  subScalar: function subScalar(s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    return this;
  },
  subVectors: function subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    return this;
  },
  multiply: function multiply(v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
      return this.multiplyVectors(v, w);
    }

    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;
    return this;
  },
  multiplyScalar: function multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  },
  multiplyVectors: function multiplyVectors(a, b) {
    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;
    return this;
  },
  applyEuler: function () {
    var quaternion = new _Quaternion.Quaternion();
    return function applyEuler(euler) {
      if (!(euler && euler.isEuler)) {
        console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');
      }

      return this.applyQuaternion(quaternion.setFromEuler(euler));
    };
  }(),
  applyAxisAngle: function () {
    var quaternion = new _Quaternion.Quaternion();
    return function applyAxisAngle(axis, angle) {
      return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));
    };
  }(),
  applyMatrix3: function applyMatrix3(m) {
    var x = this.x,
        y = this.y,
        z = this.z;
    var e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6] * z;
    this.y = e[1] * x + e[4] * y + e[7] * z;
    this.z = e[2] * x + e[5] * y + e[8] * z;
    return this;
  },
  applyMatrix4: function applyMatrix4(m) {
    var x = this.x,
        y = this.y,
        z = this.z;
    var e = m.elements;
    var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
    return this;
  },
  applyQuaternion: function applyQuaternion(q) {
    var x = this.x,
        y = this.y,
        z = this.z;
    var qx = q.x,
        qy = q.y,
        qz = q.z,
        qw = q.w; // calculate quat * vector

    var ix = qw * x + qy * z - qz * y;
    var iy = qw * y + qz * x - qx * z;
    var iz = qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return this;
  },
  project: function project(camera) {
    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
  },
  unproject: function unproject(camera) {
    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
  },
  transformDirection: function transformDirection(m) {
    // input: THREE.Matrix4 affine matrix
    // vector interpreted as a direction
    var x = this.x,
        y = this.y,
        z = this.z;
    var e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z;
    this.y = e[1] * x + e[5] * y + e[9] * z;
    this.z = e[2] * x + e[6] * y + e[10] * z;
    return this.normalize();
  },
  divide: function divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    this.z /= v.z;
    return this;
  },
  divideScalar: function divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  },
  min: function min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    return this;
  },
  max: function max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    return this;
  },
  clamp: function clamp(min, max) {
    // assumes min < max, componentwise
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    return this;
  },
  clampScalar: function clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    return this;
  },
  clampLength: function clampLength(min, max) {
    var length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  },
  floor: function floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  },
  ceil: function ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  },
  round: function round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  },
  roundToZero: function roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  },
  negate: function negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  },
  dot: function dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  },
  // TODO lengthSquared?
  lengthSq: function lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  },
  length: function length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  },
  manhattanLength: function manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  },
  normalize: function normalize() {
    return this.divideScalar(this.length() || 1);
  },
  setLength: function setLength(length) {
    return this.normalize().multiplyScalar(length);
  },
  lerp: function lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    this.z += (v.z - this.z) * alpha;
    return this;
  },
  lerpVectors: function lerpVectors(v1, v2, alpha) {
    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);
  },
  cross: function cross(v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
      return this.crossVectors(v, w);
    }

    return this.crossVectors(this, v);
  },
  crossVectors: function crossVectors(a, b) {
    var ax = a.x,
        ay = a.y,
        az = a.z;
    var bx = b.x,
        by = b.y,
        bz = b.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  },
  projectOnVector: function projectOnVector(vector) {
    var scalar = vector.dot(this) / vector.lengthSq();
    return this.copy(vector).multiplyScalar(scalar);
  },
  projectOnPlane: function () {
    var v1 = new Vector3();
    return function projectOnPlane(planeNormal) {
      v1.copy(this).projectOnVector(planeNormal);
      return this.sub(v1);
    };
  }(),
  reflect: function () {
    // reflect incident vector off plane orthogonal to normal
    // normal is assumed to have unit length
    var v1 = new Vector3();
    return function reflect(normal) {
      return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));
    };
  }(),
  angleTo: function angleTo(v) {
    var theta = this.dot(v) / Math.sqrt(this.lengthSq() * v.lengthSq()); // clamp, to handle numerical problems

    return Math.acos(_Math2._Math.clamp(theta, -1, 1));
  },
  distanceTo: function distanceTo(v) {
    return Math.sqrt(this.distanceToSquared(v));
  },
  distanceToSquared: function distanceToSquared(v) {
    var dx = this.x - v.x,
        dy = this.y - v.y,
        dz = this.z - v.z;
    return dx * dx + dy * dy + dz * dz;
  },
  manhattanDistanceTo: function manhattanDistanceTo(v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
  },
  setFromSpherical: function setFromSpherical(s) {
    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
  },
  setFromSphericalCoords: function setFromSphericalCoords(radius, phi, theta) {
    var sinPhiRadius = Math.sin(phi) * radius;
    this.x = sinPhiRadius * Math.sin(theta);
    this.y = Math.cos(phi) * radius;
    this.z = sinPhiRadius * Math.cos(theta);
    return this;
  },
  setFromCylindrical: function setFromCylindrical(c) {
    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
  },
  setFromCylindricalCoords: function setFromCylindricalCoords(radius, theta, y) {
    this.x = radius * Math.sin(theta);
    this.y = y;
    this.z = radius * Math.cos(theta);
    return this;
  },
  setFromMatrixPosition: function setFromMatrixPosition(m) {
    var e = m.elements;
    this.x = e[12];
    this.y = e[13];
    this.z = e[14];
    return this;
  },
  setFromMatrixScale: function setFromMatrixScale(m) {
    var sx = this.setFromMatrixColumn(m, 0).length();
    var sy = this.setFromMatrixColumn(m, 1).length();
    var sz = this.setFromMatrixColumn(m, 2).length();
    this.x = sx;
    this.y = sy;
    this.z = sz;
    return this;
  },
  setFromMatrixColumn: function setFromMatrixColumn(m, index) {
    return this.fromArray(m.elements, index * 4);
  },
  equals: function equals(v) {
    return v.x === this.x && v.y === this.y && v.z === this.z;
  },
  fromArray: function fromArray(array, offset) {
    if (offset === undefined) offset = 0;
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    return this;
  },
  toArray: function toArray(array, offset) {
    if (array === undefined) array = [];
    if (offset === undefined) offset = 0;
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    return array;
  },
  fromBufferAttribute: function fromBufferAttribute(attribute, index, offset) {
    if (offset !== undefined) {
      console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');
    }

    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    return this;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL3RocmVlL1ZlY3RvcjMuanMiXSwibmFtZXMiOlsiVmVjdG9yMyIsIngiLCJ5IiwieiIsIk9iamVjdCIsImFzc2lnbiIsInByb3RvdHlwZSIsImlzVmVjdG9yMyIsInNldCIsInNldFNjYWxhciIsInNjYWxhciIsInNldFgiLCJzZXRZIiwic2V0WiIsInNldENvbXBvbmVudCIsImluZGV4IiwidmFsdWUiLCJFcnJvciIsImdldENvbXBvbmVudCIsImNsb25lIiwiY29uc3RydWN0b3IiLCJjb3B5IiwidiIsImFkZCIsInciLCJ1bmRlZmluZWQiLCJjb25zb2xlIiwid2FybiIsImFkZFZlY3RvcnMiLCJhZGRTY2FsYXIiLCJzIiwiYSIsImIiLCJhZGRTY2FsZWRWZWN0b3IiLCJzdWIiLCJzdWJWZWN0b3JzIiwic3ViU2NhbGFyIiwibXVsdGlwbHkiLCJtdWx0aXBseVZlY3RvcnMiLCJtdWx0aXBseVNjYWxhciIsImFwcGx5RXVsZXIiLCJxdWF0ZXJuaW9uIiwiUXVhdGVybmlvbiIsImV1bGVyIiwiaXNFdWxlciIsImVycm9yIiwiYXBwbHlRdWF0ZXJuaW9uIiwic2V0RnJvbUV1bGVyIiwiYXBwbHlBeGlzQW5nbGUiLCJheGlzIiwiYW5nbGUiLCJzZXRGcm9tQXhpc0FuZ2xlIiwiYXBwbHlNYXRyaXgzIiwibSIsImUiLCJlbGVtZW50cyIsImFwcGx5TWF0cml4NCIsInEiLCJxeCIsInF5IiwicXoiLCJxdyIsIml4IiwiaXkiLCJpeiIsIml3IiwicHJvamVjdCIsImNhbWVyYSIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsInByb2plY3Rpb25NYXRyaXgiLCJ1bnByb2plY3QiLCJwcm9qZWN0aW9uTWF0cml4SW52ZXJzZSIsIm1hdHJpeFdvcmxkIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwibm9ybWFsaXplIiwiZGl2aWRlIiwiZGl2aWRlU2NhbGFyIiwibWluIiwiTWF0aCIsIm1heCIsImNsYW1wIiwiY2xhbXBTY2FsYXIiLCJtaW5WYWwiLCJtYXhWYWwiLCJjbGFtcExlbmd0aCIsImxlbmd0aCIsImZsb29yIiwiY2VpbCIsInJvdW5kIiwicm91bmRUb1plcm8iLCJuZWdhdGUiLCJkb3QiLCJsZW5ndGhTcSIsInNxcnQiLCJtYW5oYXR0YW5MZW5ndGgiLCJhYnMiLCJzZXRMZW5ndGgiLCJsZXJwIiwiYWxwaGEiLCJsZXJwVmVjdG9ycyIsInYxIiwidjIiLCJjcm9zcyIsImNyb3NzVmVjdG9ycyIsImF4IiwiYXkiLCJheiIsImJ4IiwiYnkiLCJieiIsInByb2plY3RPblZlY3RvciIsInZlY3RvciIsInByb2plY3RPblBsYW5lIiwicGxhbmVOb3JtYWwiLCJyZWZsZWN0Iiwibm9ybWFsIiwiYW5nbGVUbyIsInRoZXRhIiwiYWNvcyIsIl9NYXRoIiwiZGlzdGFuY2VUbyIsImRpc3RhbmNlVG9TcXVhcmVkIiwiZHgiLCJkeSIsImR6IiwibWFuaGF0dGFuRGlzdGFuY2VUbyIsInNldEZyb21TcGhlcmljYWwiLCJzZXRGcm9tU3BoZXJpY2FsQ29vcmRzIiwicmFkaXVzIiwicGhpIiwic2luUGhpUmFkaXVzIiwic2luIiwiY29zIiwic2V0RnJvbUN5bGluZHJpY2FsIiwiYyIsInNldEZyb21DeWxpbmRyaWNhbENvb3JkcyIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsInNldEZyb21NYXRyaXhTY2FsZSIsInN4Iiwic2V0RnJvbU1hdHJpeENvbHVtbiIsInN5Iiwic3oiLCJmcm9tQXJyYXkiLCJlcXVhbHMiLCJhcnJheSIsIm9mZnNldCIsInRvQXJyYXkiLCJmcm9tQnVmZmVyQXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZ2V0WCIsImdldFkiLCJnZXRaIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLFNBQVNBLE9BQVQsQ0FBa0JDLENBQWxCLEVBQXFCQyxDQUFyQixFQUF3QkMsQ0FBeEIsRUFBNEI7QUFFM0IsT0FBS0YsQ0FBTCxHQUFTQSxDQUFDLElBQUksQ0FBZDtBQUNBLE9BQUtDLENBQUwsR0FBU0EsQ0FBQyxJQUFJLENBQWQ7QUFDQSxPQUFLQyxDQUFMLEdBQVNBLENBQUMsSUFBSSxDQUFkO0FBRUE7O0FBRURDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFlTCxPQUFPLENBQUNNLFNBQXZCLEVBQWtDO0FBRWpDQyxFQUFBQSxTQUFTLEVBQUUsSUFGc0I7QUFJakNDLEVBQUFBLEdBQUcsRUFBRSxhQUFXUCxDQUFYLEVBQWNDLENBQWQsRUFBaUJDLENBQWpCLEVBQXFCO0FBRXpCLFNBQUtGLENBQUwsR0FBU0EsQ0FBVDtBQUNBLFNBQUtDLENBQUwsR0FBU0EsQ0FBVDtBQUNBLFNBQUtDLENBQUwsR0FBU0EsQ0FBVDtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBWmdDO0FBY2pDTSxFQUFBQSxTQUFTLEVBQUUsbUJBQVdDLE1BQVgsRUFBb0I7QUFFOUIsU0FBS1QsQ0FBTCxHQUFTUyxNQUFUO0FBQ0EsU0FBS1IsQ0FBTCxHQUFTUSxNQUFUO0FBQ0EsU0FBS1AsQ0FBTCxHQUFTTyxNQUFUO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0F0QmdDO0FBd0JqQ0MsRUFBQUEsSUFBSSxFQUFFLGNBQVdWLENBQVgsRUFBZTtBQUVwQixTQUFLQSxDQUFMLEdBQVNBLENBQVQ7QUFFQSxXQUFPLElBQVA7QUFFQSxHQTlCZ0M7QUFnQ2pDVyxFQUFBQSxJQUFJLEVBQUUsY0FBV1YsQ0FBWCxFQUFlO0FBRXBCLFNBQUtBLENBQUwsR0FBU0EsQ0FBVDtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBdENnQztBQXdDakNXLEVBQUFBLElBQUksRUFBRSxjQUFXVixDQUFYLEVBQWU7QUFFcEIsU0FBS0EsQ0FBTCxHQUFTQSxDQUFUO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0E5Q2dDO0FBZ0RqQ1csRUFBQUEsWUFBWSxFQUFFLHNCQUFXQyxLQUFYLEVBQWtCQyxLQUFsQixFQUEwQjtBQUV2QyxZQUFTRCxLQUFUO0FBRUMsV0FBSyxDQUFMO0FBQVEsYUFBS2QsQ0FBTCxHQUFTZSxLQUFUO0FBQWdCOztBQUN4QixXQUFLLENBQUw7QUFBUSxhQUFLZCxDQUFMLEdBQVNjLEtBQVQ7QUFBZ0I7O0FBQ3hCLFdBQUssQ0FBTDtBQUFRLGFBQUtiLENBQUwsR0FBU2EsS0FBVDtBQUFnQjs7QUFDeEI7QUFBUyxjQUFNLElBQUlDLEtBQUosQ0FBVyw0QkFBNEJGLEtBQXZDLENBQU47QUFMVjs7QUFTQSxXQUFPLElBQVA7QUFFQSxHQTdEZ0M7QUErRGpDRyxFQUFBQSxZQUFZLEVBQUUsc0JBQVdILEtBQVgsRUFBbUI7QUFFaEMsWUFBU0EsS0FBVDtBQUVDLFdBQUssQ0FBTDtBQUFRLGVBQU8sS0FBS2QsQ0FBWjs7QUFDUixXQUFLLENBQUw7QUFBUSxlQUFPLEtBQUtDLENBQVo7O0FBQ1IsV0FBSyxDQUFMO0FBQVEsZUFBTyxLQUFLQyxDQUFaOztBQUNSO0FBQVMsY0FBTSxJQUFJYyxLQUFKLENBQVcsNEJBQTRCRixLQUF2QyxDQUFOO0FBTFY7QUFTQSxHQTFFZ0M7QUE0RWpDSSxFQUFBQSxLQUFLLEVBQUUsaUJBQVk7QUFFbEIsV0FBTyxJQUFJLEtBQUtDLFdBQVQsQ0FBc0IsS0FBS25CLENBQTNCLEVBQThCLEtBQUtDLENBQW5DLEVBQXNDLEtBQUtDLENBQTNDLENBQVA7QUFFQSxHQWhGZ0M7QUFrRmpDa0IsRUFBQUEsSUFBSSxFQUFFLGNBQVdDLENBQVgsRUFBZTtBQUVwQixTQUFLckIsQ0FBTCxHQUFTcUIsQ0FBQyxDQUFDckIsQ0FBWDtBQUNBLFNBQUtDLENBQUwsR0FBU29CLENBQUMsQ0FBQ3BCLENBQVg7QUFDQSxTQUFLQyxDQUFMLEdBQVNtQixDQUFDLENBQUNuQixDQUFYO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0ExRmdDO0FBNEZqQ29CLEVBQUFBLEdBQUcsRUFBRSxhQUFXRCxDQUFYLEVBQWNFLENBQWQsRUFBa0I7QUFFdEIsUUFBS0EsQ0FBQyxLQUFLQyxTQUFYLEVBQXVCO0FBRXRCQyxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYyx1RkFBZDtBQUNBLGFBQU8sS0FBS0MsVUFBTCxDQUFpQk4sQ0FBakIsRUFBb0JFLENBQXBCLENBQVA7QUFFQTs7QUFFRCxTQUFLdkIsQ0FBTCxJQUFVcUIsQ0FBQyxDQUFDckIsQ0FBWjtBQUNBLFNBQUtDLENBQUwsSUFBVW9CLENBQUMsQ0FBQ3BCLENBQVo7QUFDQSxTQUFLQyxDQUFMLElBQVVtQixDQUFDLENBQUNuQixDQUFaO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0EzR2dDO0FBNkdqQzBCLEVBQUFBLFNBQVMsRUFBRSxtQkFBV0MsQ0FBWCxFQUFlO0FBRXpCLFNBQUs3QixDQUFMLElBQVU2QixDQUFWO0FBQ0EsU0FBSzVCLENBQUwsSUFBVTRCLENBQVY7QUFDQSxTQUFLM0IsQ0FBTCxJQUFVMkIsQ0FBVjtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBckhnQztBQXVIakNGLEVBQUFBLFVBQVUsRUFBRSxvQkFBV0csQ0FBWCxFQUFjQyxDQUFkLEVBQWtCO0FBRTdCLFNBQUsvQixDQUFMLEdBQVM4QixDQUFDLENBQUM5QixDQUFGLEdBQU0rQixDQUFDLENBQUMvQixDQUFqQjtBQUNBLFNBQUtDLENBQUwsR0FBUzZCLENBQUMsQ0FBQzdCLENBQUYsR0FBTThCLENBQUMsQ0FBQzlCLENBQWpCO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTNEIsQ0FBQyxDQUFDNUIsQ0FBRixHQUFNNkIsQ0FBQyxDQUFDN0IsQ0FBakI7QUFFQSxXQUFPLElBQVA7QUFFQSxHQS9IZ0M7QUFpSWpDOEIsRUFBQUEsZUFBZSxFQUFFLHlCQUFXWCxDQUFYLEVBQWNRLENBQWQsRUFBa0I7QUFFbEMsU0FBSzdCLENBQUwsSUFBVXFCLENBQUMsQ0FBQ3JCLENBQUYsR0FBTTZCLENBQWhCO0FBQ0EsU0FBSzVCLENBQUwsSUFBVW9CLENBQUMsQ0FBQ3BCLENBQUYsR0FBTTRCLENBQWhCO0FBQ0EsU0FBSzNCLENBQUwsSUFBVW1CLENBQUMsQ0FBQ25CLENBQUYsR0FBTTJCLENBQWhCO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0F6SWdDO0FBMklqQ0ksRUFBQUEsR0FBRyxFQUFFLGFBQVdaLENBQVgsRUFBY0UsQ0FBZCxFQUFrQjtBQUV0QixRQUFLQSxDQUFDLEtBQUtDLFNBQVgsRUFBdUI7QUFFdEJDLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFjLHVGQUFkO0FBQ0EsYUFBTyxLQUFLUSxVQUFMLENBQWlCYixDQUFqQixFQUFvQkUsQ0FBcEIsQ0FBUDtBQUVBOztBQUVELFNBQUt2QixDQUFMLElBQVVxQixDQUFDLENBQUNyQixDQUFaO0FBQ0EsU0FBS0MsQ0FBTCxJQUFVb0IsQ0FBQyxDQUFDcEIsQ0FBWjtBQUNBLFNBQUtDLENBQUwsSUFBVW1CLENBQUMsQ0FBQ25CLENBQVo7QUFFQSxXQUFPLElBQVA7QUFFQSxHQTFKZ0M7QUE0SmpDaUMsRUFBQUEsU0FBUyxFQUFFLG1CQUFXTixDQUFYLEVBQWU7QUFFekIsU0FBSzdCLENBQUwsSUFBVTZCLENBQVY7QUFDQSxTQUFLNUIsQ0FBTCxJQUFVNEIsQ0FBVjtBQUNBLFNBQUszQixDQUFMLElBQVUyQixDQUFWO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0FwS2dDO0FBc0tqQ0ssRUFBQUEsVUFBVSxFQUFFLG9CQUFXSixDQUFYLEVBQWNDLENBQWQsRUFBa0I7QUFFN0IsU0FBSy9CLENBQUwsR0FBUzhCLENBQUMsQ0FBQzlCLENBQUYsR0FBTStCLENBQUMsQ0FBQy9CLENBQWpCO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTNkIsQ0FBQyxDQUFDN0IsQ0FBRixHQUFNOEIsQ0FBQyxDQUFDOUIsQ0FBakI7QUFDQSxTQUFLQyxDQUFMLEdBQVM0QixDQUFDLENBQUM1QixDQUFGLEdBQU02QixDQUFDLENBQUM3QixDQUFqQjtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBOUtnQztBQWdMakNrQyxFQUFBQSxRQUFRLEVBQUUsa0JBQVdmLENBQVgsRUFBY0UsQ0FBZCxFQUFrQjtBQUUzQixRQUFLQSxDQUFDLEtBQUtDLFNBQVgsRUFBdUI7QUFFdEJDLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFjLGlHQUFkO0FBQ0EsYUFBTyxLQUFLVyxlQUFMLENBQXNCaEIsQ0FBdEIsRUFBeUJFLENBQXpCLENBQVA7QUFFQTs7QUFFRCxTQUFLdkIsQ0FBTCxJQUFVcUIsQ0FBQyxDQUFDckIsQ0FBWjtBQUNBLFNBQUtDLENBQUwsSUFBVW9CLENBQUMsQ0FBQ3BCLENBQVo7QUFDQSxTQUFLQyxDQUFMLElBQVVtQixDQUFDLENBQUNuQixDQUFaO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0EvTGdDO0FBaU1qQ29DLEVBQUFBLGNBQWMsRUFBRSx3QkFBVzdCLE1BQVgsRUFBb0I7QUFFbkMsU0FBS1QsQ0FBTCxJQUFVUyxNQUFWO0FBQ0EsU0FBS1IsQ0FBTCxJQUFVUSxNQUFWO0FBQ0EsU0FBS1AsQ0FBTCxJQUFVTyxNQUFWO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0F6TWdDO0FBMk1qQzRCLEVBQUFBLGVBQWUsRUFBRSx5QkFBV1AsQ0FBWCxFQUFjQyxDQUFkLEVBQWtCO0FBRWxDLFNBQUsvQixDQUFMLEdBQVM4QixDQUFDLENBQUM5QixDQUFGLEdBQU0rQixDQUFDLENBQUMvQixDQUFqQjtBQUNBLFNBQUtDLENBQUwsR0FBUzZCLENBQUMsQ0FBQzdCLENBQUYsR0FBTThCLENBQUMsQ0FBQzlCLENBQWpCO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTNEIsQ0FBQyxDQUFDNUIsQ0FBRixHQUFNNkIsQ0FBQyxDQUFDN0IsQ0FBakI7QUFFQSxXQUFPLElBQVA7QUFFQSxHQW5OZ0M7QUFxTmpDcUMsRUFBQUEsVUFBVSxFQUFFLFlBQVk7QUFFdkIsUUFBSUMsVUFBVSxHQUFHLElBQUlDLHNCQUFKLEVBQWpCO0FBRUEsV0FBTyxTQUFTRixVQUFULENBQXFCRyxLQUFyQixFQUE2QjtBQUVuQyxVQUFLLEVBQUlBLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxPQUFuQixDQUFMLEVBQW9DO0FBRW5DbEIsUUFBQUEsT0FBTyxDQUFDbUIsS0FBUixDQUFlLDZGQUFmO0FBRUE7O0FBRUQsYUFBTyxLQUFLQyxlQUFMLENBQXNCTCxVQUFVLENBQUNNLFlBQVgsQ0FBeUJKLEtBQXpCLENBQXRCLENBQVA7QUFFQSxLQVZEO0FBWUEsR0FoQlcsRUFyTnFCO0FBdU9qQ0ssRUFBQUEsY0FBYyxFQUFFLFlBQVk7QUFFM0IsUUFBSVAsVUFBVSxHQUFHLElBQUlDLHNCQUFKLEVBQWpCO0FBRUEsV0FBTyxTQUFTTSxjQUFULENBQXlCQyxJQUF6QixFQUErQkMsS0FBL0IsRUFBdUM7QUFFN0MsYUFBTyxLQUFLSixlQUFMLENBQXNCTCxVQUFVLENBQUNVLGdCQUFYLENBQTZCRixJQUE3QixFQUFtQ0MsS0FBbkMsQ0FBdEIsQ0FBUDtBQUVBLEtBSkQ7QUFNQSxHQVZlLEVBdk9pQjtBQW1QakNFLEVBQUFBLFlBQVksRUFBRSxzQkFBV0MsQ0FBWCxFQUFlO0FBRTVCLFFBQUlwRCxDQUFDLEdBQUcsS0FBS0EsQ0FBYjtBQUFBLFFBQWdCQyxDQUFDLEdBQUcsS0FBS0EsQ0FBekI7QUFBQSxRQUE0QkMsQ0FBQyxHQUFHLEtBQUtBLENBQXJDO0FBQ0EsUUFBSW1ELENBQUMsR0FBR0QsQ0FBQyxDQUFDRSxRQUFWO0FBRUEsU0FBS3RELENBQUwsR0FBU3FELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU3JELENBQVQsR0FBYXFELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU3BELENBQXRCLEdBQTBCb0QsQ0FBQyxDQUFFLENBQUYsQ0FBRCxHQUFTbkQsQ0FBNUM7QUFDQSxTQUFLRCxDQUFMLEdBQVNvRCxDQUFDLENBQUUsQ0FBRixDQUFELEdBQVNyRCxDQUFULEdBQWFxRCxDQUFDLENBQUUsQ0FBRixDQUFELEdBQVNwRCxDQUF0QixHQUEwQm9ELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU25ELENBQTVDO0FBQ0EsU0FBS0EsQ0FBTCxHQUFTbUQsQ0FBQyxDQUFFLENBQUYsQ0FBRCxHQUFTckQsQ0FBVCxHQUFhcUQsQ0FBQyxDQUFFLENBQUYsQ0FBRCxHQUFTcEQsQ0FBdEIsR0FBMEJvRCxDQUFDLENBQUUsQ0FBRixDQUFELEdBQVNuRCxDQUE1QztBQUVBLFdBQU8sSUFBUDtBQUVBLEdBOVBnQztBQWdRakNxRCxFQUFBQSxZQUFZLEVBQUUsc0JBQVdILENBQVgsRUFBZTtBQUU1QixRQUFJcEQsQ0FBQyxHQUFHLEtBQUtBLENBQWI7QUFBQSxRQUFnQkMsQ0FBQyxHQUFHLEtBQUtBLENBQXpCO0FBQUEsUUFBNEJDLENBQUMsR0FBRyxLQUFLQSxDQUFyQztBQUNBLFFBQUltRCxDQUFDLEdBQUdELENBQUMsQ0FBQ0UsUUFBVjtBQUVBLFFBQUkvQixDQUFDLEdBQUcsS0FBTThCLENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU3JELENBQVQsR0FBYXFELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU3BELENBQXRCLEdBQTBCb0QsQ0FBQyxDQUFFLEVBQUYsQ0FBRCxHQUFVbkQsQ0FBcEMsR0FBd0NtRCxDQUFDLENBQUUsRUFBRixDQUEvQyxDQUFSO0FBRUEsU0FBS3JELENBQUwsR0FBUyxDQUFFcUQsQ0FBQyxDQUFFLENBQUYsQ0FBRCxHQUFTckQsQ0FBVCxHQUFhcUQsQ0FBQyxDQUFFLENBQUYsQ0FBRCxHQUFTcEQsQ0FBdEIsR0FBMEJvRCxDQUFDLENBQUUsQ0FBRixDQUFELEdBQVNuRCxDQUFuQyxHQUF1Q21ELENBQUMsQ0FBRSxFQUFGLENBQTFDLElBQXFEOUIsQ0FBOUQ7QUFDQSxTQUFLdEIsQ0FBTCxHQUFTLENBQUVvRCxDQUFDLENBQUUsQ0FBRixDQUFELEdBQVNyRCxDQUFULEdBQWFxRCxDQUFDLENBQUUsQ0FBRixDQUFELEdBQVNwRCxDQUF0QixHQUEwQm9ELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU25ELENBQW5DLEdBQXVDbUQsQ0FBQyxDQUFFLEVBQUYsQ0FBMUMsSUFBcUQ5QixDQUE5RDtBQUNBLFNBQUtyQixDQUFMLEdBQVMsQ0FBRW1ELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU3JELENBQVQsR0FBYXFELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU3BELENBQXRCLEdBQTBCb0QsQ0FBQyxDQUFFLEVBQUYsQ0FBRCxHQUFVbkQsQ0FBcEMsR0FBd0NtRCxDQUFDLENBQUUsRUFBRixDQUEzQyxJQUFzRDlCLENBQS9EO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0E3UWdDO0FBK1FqQ3NCLEVBQUFBLGVBQWUsRUFBRSx5QkFBV1csQ0FBWCxFQUFlO0FBRS9CLFFBQUl4RCxDQUFDLEdBQUcsS0FBS0EsQ0FBYjtBQUFBLFFBQWdCQyxDQUFDLEdBQUcsS0FBS0EsQ0FBekI7QUFBQSxRQUE0QkMsQ0FBQyxHQUFHLEtBQUtBLENBQXJDO0FBQ0EsUUFBSXVELEVBQUUsR0FBR0QsQ0FBQyxDQUFDeEQsQ0FBWDtBQUFBLFFBQWMwRCxFQUFFLEdBQUdGLENBQUMsQ0FBQ3ZELENBQXJCO0FBQUEsUUFBd0IwRCxFQUFFLEdBQUdILENBQUMsQ0FBQ3RELENBQS9CO0FBQUEsUUFBa0MwRCxFQUFFLEdBQUdKLENBQUMsQ0FBQ2pDLENBQXpDLENBSCtCLENBSy9COztBQUVBLFFBQUlzQyxFQUFFLEdBQUdELEVBQUUsR0FBRzVELENBQUwsR0FBUzBELEVBQUUsR0FBR3hELENBQWQsR0FBa0J5RCxFQUFFLEdBQUcxRCxDQUFoQztBQUNBLFFBQUk2RCxFQUFFLEdBQUdGLEVBQUUsR0FBRzNELENBQUwsR0FBUzBELEVBQUUsR0FBRzNELENBQWQsR0FBa0J5RCxFQUFFLEdBQUd2RCxDQUFoQztBQUNBLFFBQUk2RCxFQUFFLEdBQUdILEVBQUUsR0FBRzFELENBQUwsR0FBU3VELEVBQUUsR0FBR3hELENBQWQsR0FBa0J5RCxFQUFFLEdBQUcxRCxDQUFoQztBQUNBLFFBQUlnRSxFQUFFLEdBQUcsQ0FBRVAsRUFBRixHQUFPekQsQ0FBUCxHQUFXMEQsRUFBRSxHQUFHekQsQ0FBaEIsR0FBb0IwRCxFQUFFLEdBQUd6RCxDQUFsQyxDQVYrQixDQVkvQjs7QUFFQSxTQUFLRixDQUFMLEdBQVM2RCxFQUFFLEdBQUdELEVBQUwsR0FBVUksRUFBRSxHQUFHLENBQUVQLEVBQWpCLEdBQXNCSyxFQUFFLEdBQUcsQ0FBRUgsRUFBN0IsR0FBa0NJLEVBQUUsR0FBRyxDQUFFTCxFQUFsRDtBQUNBLFNBQUt6RCxDQUFMLEdBQVM2RCxFQUFFLEdBQUdGLEVBQUwsR0FBVUksRUFBRSxHQUFHLENBQUVOLEVBQWpCLEdBQXNCSyxFQUFFLEdBQUcsQ0FBRU4sRUFBN0IsR0FBa0NJLEVBQUUsR0FBRyxDQUFFRixFQUFsRDtBQUNBLFNBQUt6RCxDQUFMLEdBQVM2RCxFQUFFLEdBQUdILEVBQUwsR0FBVUksRUFBRSxHQUFHLENBQUVMLEVBQWpCLEdBQXNCRSxFQUFFLEdBQUcsQ0FBRUgsRUFBN0IsR0FBa0NJLEVBQUUsR0FBRyxDQUFFTCxFQUFsRDtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBblNnQztBQXFTakNRLEVBQUFBLE9BQU8sRUFBRSxpQkFBV0MsTUFBWCxFQUFvQjtBQUU1QixXQUFPLEtBQUtYLFlBQUwsQ0FBbUJXLE1BQU0sQ0FBQ0Msa0JBQTFCLEVBQStDWixZQUEvQyxDQUE2RFcsTUFBTSxDQUFDRSxnQkFBcEUsQ0FBUDtBQUVBLEdBelNnQztBQTJTakNDLEVBQUFBLFNBQVMsRUFBRSxtQkFBV0gsTUFBWCxFQUFvQjtBQUU5QixXQUFPLEtBQUtYLFlBQUwsQ0FBbUJXLE1BQU0sQ0FBQ0ksdUJBQTFCLEVBQW9EZixZQUFwRCxDQUFrRVcsTUFBTSxDQUFDSyxXQUF6RSxDQUFQO0FBRUEsR0EvU2dDO0FBaVRqQ0MsRUFBQUEsa0JBQWtCLEVBQUUsNEJBQVdwQixDQUFYLEVBQWU7QUFFbEM7QUFDQTtBQUVBLFFBQUlwRCxDQUFDLEdBQUcsS0FBS0EsQ0FBYjtBQUFBLFFBQWdCQyxDQUFDLEdBQUcsS0FBS0EsQ0FBekI7QUFBQSxRQUE0QkMsQ0FBQyxHQUFHLEtBQUtBLENBQXJDO0FBQ0EsUUFBSW1ELENBQUMsR0FBR0QsQ0FBQyxDQUFDRSxRQUFWO0FBRUEsU0FBS3RELENBQUwsR0FBU3FELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU3JELENBQVQsR0FBYXFELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU3BELENBQXRCLEdBQTBCb0QsQ0FBQyxDQUFFLENBQUYsQ0FBRCxHQUFTbkQsQ0FBNUM7QUFDQSxTQUFLRCxDQUFMLEdBQVNvRCxDQUFDLENBQUUsQ0FBRixDQUFELEdBQVNyRCxDQUFULEdBQWFxRCxDQUFDLENBQUUsQ0FBRixDQUFELEdBQVNwRCxDQUF0QixHQUEwQm9ELENBQUMsQ0FBRSxDQUFGLENBQUQsR0FBU25ELENBQTVDO0FBQ0EsU0FBS0EsQ0FBTCxHQUFTbUQsQ0FBQyxDQUFFLENBQUYsQ0FBRCxHQUFTckQsQ0FBVCxHQUFhcUQsQ0FBQyxDQUFFLENBQUYsQ0FBRCxHQUFTcEQsQ0FBdEIsR0FBMEJvRCxDQUFDLENBQUUsRUFBRixDQUFELEdBQVVuRCxDQUE3QztBQUVBLFdBQU8sS0FBS3VFLFNBQUwsRUFBUDtBQUVBLEdBL1RnQztBQWlVakNDLEVBQUFBLE1BQU0sRUFBRSxnQkFBV3JELENBQVgsRUFBZTtBQUV0QixTQUFLckIsQ0FBTCxJQUFVcUIsQ0FBQyxDQUFDckIsQ0FBWjtBQUNBLFNBQUtDLENBQUwsSUFBVW9CLENBQUMsQ0FBQ3BCLENBQVo7QUFDQSxTQUFLQyxDQUFMLElBQVVtQixDQUFDLENBQUNuQixDQUFaO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0F6VWdDO0FBMlVqQ3lFLEVBQUFBLFlBQVksRUFBRSxzQkFBV2xFLE1BQVgsRUFBb0I7QUFFakMsV0FBTyxLQUFLNkIsY0FBTCxDQUFxQixJQUFJN0IsTUFBekIsQ0FBUDtBQUVBLEdBL1VnQztBQWlWakNtRSxFQUFBQSxHQUFHLEVBQUUsYUFBV3ZELENBQVgsRUFBZTtBQUVuQixTQUFLckIsQ0FBTCxHQUFTNkUsSUFBSSxDQUFDRCxHQUFMLENBQVUsS0FBSzVFLENBQWYsRUFBa0JxQixDQUFDLENBQUNyQixDQUFwQixDQUFUO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTNEUsSUFBSSxDQUFDRCxHQUFMLENBQVUsS0FBSzNFLENBQWYsRUFBa0JvQixDQUFDLENBQUNwQixDQUFwQixDQUFUO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTMkUsSUFBSSxDQUFDRCxHQUFMLENBQVUsS0FBSzFFLENBQWYsRUFBa0JtQixDQUFDLENBQUNuQixDQUFwQixDQUFUO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0F6VmdDO0FBMlZqQzRFLEVBQUFBLEdBQUcsRUFBRSxhQUFXekQsQ0FBWCxFQUFlO0FBRW5CLFNBQUtyQixDQUFMLEdBQVM2RSxJQUFJLENBQUNDLEdBQUwsQ0FBVSxLQUFLOUUsQ0FBZixFQUFrQnFCLENBQUMsQ0FBQ3JCLENBQXBCLENBQVQ7QUFDQSxTQUFLQyxDQUFMLEdBQVM0RSxJQUFJLENBQUNDLEdBQUwsQ0FBVSxLQUFLN0UsQ0FBZixFQUFrQm9CLENBQUMsQ0FBQ3BCLENBQXBCLENBQVQ7QUFDQSxTQUFLQyxDQUFMLEdBQVMyRSxJQUFJLENBQUNDLEdBQUwsQ0FBVSxLQUFLNUUsQ0FBZixFQUFrQm1CLENBQUMsQ0FBQ25CLENBQXBCLENBQVQ7QUFFQSxXQUFPLElBQVA7QUFFQSxHQW5XZ0M7QUFxV2pDNkUsRUFBQUEsS0FBSyxFQUFFLGVBQVdILEdBQVgsRUFBZ0JFLEdBQWhCLEVBQXNCO0FBRTVCO0FBRUEsU0FBSzlFLENBQUwsR0FBUzZFLElBQUksQ0FBQ0MsR0FBTCxDQUFVRixHQUFHLENBQUM1RSxDQUFkLEVBQWlCNkUsSUFBSSxDQUFDRCxHQUFMLENBQVVFLEdBQUcsQ0FBQzlFLENBQWQsRUFBaUIsS0FBS0EsQ0FBdEIsQ0FBakIsQ0FBVDtBQUNBLFNBQUtDLENBQUwsR0FBUzRFLElBQUksQ0FBQ0MsR0FBTCxDQUFVRixHQUFHLENBQUMzRSxDQUFkLEVBQWlCNEUsSUFBSSxDQUFDRCxHQUFMLENBQVVFLEdBQUcsQ0FBQzdFLENBQWQsRUFBaUIsS0FBS0EsQ0FBdEIsQ0FBakIsQ0FBVDtBQUNBLFNBQUtDLENBQUwsR0FBUzJFLElBQUksQ0FBQ0MsR0FBTCxDQUFVRixHQUFHLENBQUMxRSxDQUFkLEVBQWlCMkUsSUFBSSxDQUFDRCxHQUFMLENBQVVFLEdBQUcsQ0FBQzVFLENBQWQsRUFBaUIsS0FBS0EsQ0FBdEIsQ0FBakIsQ0FBVDtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBL1dnQztBQWlYakM4RSxFQUFBQSxXQUFXLEVBQUUscUJBQVdDLE1BQVgsRUFBbUJDLE1BQW5CLEVBQTRCO0FBRXhDLFNBQUtsRixDQUFMLEdBQVM2RSxJQUFJLENBQUNDLEdBQUwsQ0FBVUcsTUFBVixFQUFrQkosSUFBSSxDQUFDRCxHQUFMLENBQVVNLE1BQVYsRUFBa0IsS0FBS2xGLENBQXZCLENBQWxCLENBQVQ7QUFDQSxTQUFLQyxDQUFMLEdBQVM0RSxJQUFJLENBQUNDLEdBQUwsQ0FBVUcsTUFBVixFQUFrQkosSUFBSSxDQUFDRCxHQUFMLENBQVVNLE1BQVYsRUFBa0IsS0FBS2pGLENBQXZCLENBQWxCLENBQVQ7QUFDQSxTQUFLQyxDQUFMLEdBQVMyRSxJQUFJLENBQUNDLEdBQUwsQ0FBVUcsTUFBVixFQUFrQkosSUFBSSxDQUFDRCxHQUFMLENBQVVNLE1BQVYsRUFBa0IsS0FBS2hGLENBQXZCLENBQWxCLENBQVQ7QUFFQSxXQUFPLElBQVA7QUFFQSxHQXpYZ0M7QUEyWGpDaUYsRUFBQUEsV0FBVyxFQUFFLHFCQUFXUCxHQUFYLEVBQWdCRSxHQUFoQixFQUFzQjtBQUVsQyxRQUFJTSxNQUFNLEdBQUcsS0FBS0EsTUFBTCxFQUFiO0FBRUEsV0FBTyxLQUFLVCxZQUFMLENBQW1CUyxNQUFNLElBQUksQ0FBN0IsRUFBaUM5QyxjQUFqQyxDQUFpRHVDLElBQUksQ0FBQ0MsR0FBTCxDQUFVRixHQUFWLEVBQWVDLElBQUksQ0FBQ0QsR0FBTCxDQUFVRSxHQUFWLEVBQWVNLE1BQWYsQ0FBZixDQUFqRCxDQUFQO0FBRUEsR0FqWWdDO0FBbVlqQ0MsRUFBQUEsS0FBSyxFQUFFLGlCQUFZO0FBRWxCLFNBQUtyRixDQUFMLEdBQVM2RSxJQUFJLENBQUNRLEtBQUwsQ0FBWSxLQUFLckYsQ0FBakIsQ0FBVDtBQUNBLFNBQUtDLENBQUwsR0FBUzRFLElBQUksQ0FBQ1EsS0FBTCxDQUFZLEtBQUtwRixDQUFqQixDQUFUO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTMkUsSUFBSSxDQUFDUSxLQUFMLENBQVksS0FBS25GLENBQWpCLENBQVQ7QUFFQSxXQUFPLElBQVA7QUFFQSxHQTNZZ0M7QUE2WWpDb0YsRUFBQUEsSUFBSSxFQUFFLGdCQUFZO0FBRWpCLFNBQUt0RixDQUFMLEdBQVM2RSxJQUFJLENBQUNTLElBQUwsQ0FBVyxLQUFLdEYsQ0FBaEIsQ0FBVDtBQUNBLFNBQUtDLENBQUwsR0FBUzRFLElBQUksQ0FBQ1MsSUFBTCxDQUFXLEtBQUtyRixDQUFoQixDQUFUO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTMkUsSUFBSSxDQUFDUyxJQUFMLENBQVcsS0FBS3BGLENBQWhCLENBQVQ7QUFFQSxXQUFPLElBQVA7QUFFQSxHQXJaZ0M7QUF1WmpDcUYsRUFBQUEsS0FBSyxFQUFFLGlCQUFZO0FBRWxCLFNBQUt2RixDQUFMLEdBQVM2RSxJQUFJLENBQUNVLEtBQUwsQ0FBWSxLQUFLdkYsQ0FBakIsQ0FBVDtBQUNBLFNBQUtDLENBQUwsR0FBUzRFLElBQUksQ0FBQ1UsS0FBTCxDQUFZLEtBQUt0RixDQUFqQixDQUFUO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTMkUsSUFBSSxDQUFDVSxLQUFMLENBQVksS0FBS3JGLENBQWpCLENBQVQ7QUFFQSxXQUFPLElBQVA7QUFFQSxHQS9aZ0M7QUFpYWpDc0YsRUFBQUEsV0FBVyxFQUFFLHVCQUFZO0FBRXhCLFNBQUt4RixDQUFMLEdBQVcsS0FBS0EsQ0FBTCxHQUFTLENBQVgsR0FBaUI2RSxJQUFJLENBQUNTLElBQUwsQ0FBVyxLQUFLdEYsQ0FBaEIsQ0FBakIsR0FBdUM2RSxJQUFJLENBQUNRLEtBQUwsQ0FBWSxLQUFLckYsQ0FBakIsQ0FBaEQ7QUFDQSxTQUFLQyxDQUFMLEdBQVcsS0FBS0EsQ0FBTCxHQUFTLENBQVgsR0FBaUI0RSxJQUFJLENBQUNTLElBQUwsQ0FBVyxLQUFLckYsQ0FBaEIsQ0FBakIsR0FBdUM0RSxJQUFJLENBQUNRLEtBQUwsQ0FBWSxLQUFLcEYsQ0FBakIsQ0FBaEQ7QUFDQSxTQUFLQyxDQUFMLEdBQVcsS0FBS0EsQ0FBTCxHQUFTLENBQVgsR0FBaUIyRSxJQUFJLENBQUNTLElBQUwsQ0FBVyxLQUFLcEYsQ0FBaEIsQ0FBakIsR0FBdUMyRSxJQUFJLENBQUNRLEtBQUwsQ0FBWSxLQUFLbkYsQ0FBakIsQ0FBaEQ7QUFFQSxXQUFPLElBQVA7QUFFQSxHQXphZ0M7QUEyYWpDdUYsRUFBQUEsTUFBTSxFQUFFLGtCQUFZO0FBRW5CLFNBQUt6RixDQUFMLEdBQVMsQ0FBRSxLQUFLQSxDQUFoQjtBQUNBLFNBQUtDLENBQUwsR0FBUyxDQUFFLEtBQUtBLENBQWhCO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTLENBQUUsS0FBS0EsQ0FBaEI7QUFFQSxXQUFPLElBQVA7QUFFQSxHQW5iZ0M7QUFxYmpDd0YsRUFBQUEsR0FBRyxFQUFFLGFBQVdyRSxDQUFYLEVBQWU7QUFFbkIsV0FBTyxLQUFLckIsQ0FBTCxHQUFTcUIsQ0FBQyxDQUFDckIsQ0FBWCxHQUFlLEtBQUtDLENBQUwsR0FBU29CLENBQUMsQ0FBQ3BCLENBQTFCLEdBQThCLEtBQUtDLENBQUwsR0FBU21CLENBQUMsQ0FBQ25CLENBQWhEO0FBRUEsR0F6YmdDO0FBMmJqQztBQUVBeUYsRUFBQUEsUUFBUSxFQUFFLG9CQUFZO0FBRXJCLFdBQU8sS0FBSzNGLENBQUwsR0FBUyxLQUFLQSxDQUFkLEdBQWtCLEtBQUtDLENBQUwsR0FBUyxLQUFLQSxDQUFoQyxHQUFvQyxLQUFLQyxDQUFMLEdBQVMsS0FBS0EsQ0FBekQ7QUFFQSxHQWpjZ0M7QUFtY2pDa0YsRUFBQUEsTUFBTSxFQUFFLGtCQUFZO0FBRW5CLFdBQU9QLElBQUksQ0FBQ2UsSUFBTCxDQUFXLEtBQUs1RixDQUFMLEdBQVMsS0FBS0EsQ0FBZCxHQUFrQixLQUFLQyxDQUFMLEdBQVMsS0FBS0EsQ0FBaEMsR0FBb0MsS0FBS0MsQ0FBTCxHQUFTLEtBQUtBLENBQTdELENBQVA7QUFFQSxHQXZjZ0M7QUF5Y2pDMkYsRUFBQUEsZUFBZSxFQUFFLDJCQUFZO0FBRTVCLFdBQU9oQixJQUFJLENBQUNpQixHQUFMLENBQVUsS0FBSzlGLENBQWYsSUFBcUI2RSxJQUFJLENBQUNpQixHQUFMLENBQVUsS0FBSzdGLENBQWYsQ0FBckIsR0FBMEM0RSxJQUFJLENBQUNpQixHQUFMLENBQVUsS0FBSzVGLENBQWYsQ0FBakQ7QUFFQSxHQTdjZ0M7QUErY2pDdUUsRUFBQUEsU0FBUyxFQUFFLHFCQUFZO0FBRXRCLFdBQU8sS0FBS0UsWUFBTCxDQUFtQixLQUFLUyxNQUFMLE1BQWlCLENBQXBDLENBQVA7QUFFQSxHQW5kZ0M7QUFxZGpDVyxFQUFBQSxTQUFTLEVBQUUsbUJBQVdYLE1BQVgsRUFBb0I7QUFFOUIsV0FBTyxLQUFLWCxTQUFMLEdBQWlCbkMsY0FBakIsQ0FBaUM4QyxNQUFqQyxDQUFQO0FBRUEsR0F6ZGdDO0FBMmRqQ1ksRUFBQUEsSUFBSSxFQUFFLGNBQVczRSxDQUFYLEVBQWM0RSxLQUFkLEVBQXNCO0FBRTNCLFNBQUtqRyxDQUFMLElBQVUsQ0FBRXFCLENBQUMsQ0FBQ3JCLENBQUYsR0FBTSxLQUFLQSxDQUFiLElBQW1CaUcsS0FBN0I7QUFDQSxTQUFLaEcsQ0FBTCxJQUFVLENBQUVvQixDQUFDLENBQUNwQixDQUFGLEdBQU0sS0FBS0EsQ0FBYixJQUFtQmdHLEtBQTdCO0FBQ0EsU0FBSy9GLENBQUwsSUFBVSxDQUFFbUIsQ0FBQyxDQUFDbkIsQ0FBRixHQUFNLEtBQUtBLENBQWIsSUFBbUIrRixLQUE3QjtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBbmVnQztBQXFlakNDLEVBQUFBLFdBQVcsRUFBRSxxQkFBV0MsRUFBWCxFQUFlQyxFQUFmLEVBQW1CSCxLQUFuQixFQUEyQjtBQUV2QyxXQUFPLEtBQUsvRCxVQUFMLENBQWlCa0UsRUFBakIsRUFBcUJELEVBQXJCLEVBQTBCN0QsY0FBMUIsQ0FBMEMyRCxLQUExQyxFQUFrRDNFLEdBQWxELENBQXVENkUsRUFBdkQsQ0FBUDtBQUVBLEdBemVnQztBQTJlakNFLEVBQUFBLEtBQUssRUFBRSxlQUFXaEYsQ0FBWCxFQUFjRSxDQUFkLEVBQWtCO0FBRXhCLFFBQUtBLENBQUMsS0FBS0MsU0FBWCxFQUF1QjtBQUV0QkMsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWMsMkZBQWQ7QUFDQSxhQUFPLEtBQUs0RSxZQUFMLENBQW1CakYsQ0FBbkIsRUFBc0JFLENBQXRCLENBQVA7QUFFQTs7QUFFRCxXQUFPLEtBQUsrRSxZQUFMLENBQW1CLElBQW5CLEVBQXlCakYsQ0FBekIsQ0FBUDtBQUVBLEdBdGZnQztBQXdmakNpRixFQUFBQSxZQUFZLEVBQUUsc0JBQVd4RSxDQUFYLEVBQWNDLENBQWQsRUFBa0I7QUFFL0IsUUFBSXdFLEVBQUUsR0FBR3pFLENBQUMsQ0FBQzlCLENBQVg7QUFBQSxRQUFjd0csRUFBRSxHQUFHMUUsQ0FBQyxDQUFDN0IsQ0FBckI7QUFBQSxRQUF3QndHLEVBQUUsR0FBRzNFLENBQUMsQ0FBQzVCLENBQS9CO0FBQ0EsUUFBSXdHLEVBQUUsR0FBRzNFLENBQUMsQ0FBQy9CLENBQVg7QUFBQSxRQUFjMkcsRUFBRSxHQUFHNUUsQ0FBQyxDQUFDOUIsQ0FBckI7QUFBQSxRQUF3QjJHLEVBQUUsR0FBRzdFLENBQUMsQ0FBQzdCLENBQS9CO0FBRUEsU0FBS0YsQ0FBTCxHQUFTd0csRUFBRSxHQUFHSSxFQUFMLEdBQVVILEVBQUUsR0FBR0UsRUFBeEI7QUFDQSxTQUFLMUcsQ0FBTCxHQUFTd0csRUFBRSxHQUFHQyxFQUFMLEdBQVVILEVBQUUsR0FBR0ssRUFBeEI7QUFDQSxTQUFLMUcsQ0FBTCxHQUFTcUcsRUFBRSxHQUFHSSxFQUFMLEdBQVVILEVBQUUsR0FBR0UsRUFBeEI7QUFFQSxXQUFPLElBQVA7QUFFQSxHQW5nQmdDO0FBcWdCakNHLEVBQUFBLGVBQWUsRUFBRSx5QkFBV0MsTUFBWCxFQUFvQjtBQUVwQyxRQUFJckcsTUFBTSxHQUFHcUcsTUFBTSxDQUFDcEIsR0FBUCxDQUFZLElBQVosSUFBcUJvQixNQUFNLENBQUNuQixRQUFQLEVBQWxDO0FBRUEsV0FBTyxLQUFLdkUsSUFBTCxDQUFXMEYsTUFBWCxFQUFvQnhFLGNBQXBCLENBQW9DN0IsTUFBcEMsQ0FBUDtBQUVBLEdBM2dCZ0M7QUE2Z0JqQ3NHLEVBQUFBLGNBQWMsRUFBRSxZQUFZO0FBRTNCLFFBQUlaLEVBQUUsR0FBRyxJQUFJcEcsT0FBSixFQUFUO0FBRUEsV0FBTyxTQUFTZ0gsY0FBVCxDQUF5QkMsV0FBekIsRUFBdUM7QUFFN0NiLE1BQUFBLEVBQUUsQ0FBQy9FLElBQUgsQ0FBUyxJQUFULEVBQWdCeUYsZUFBaEIsQ0FBaUNHLFdBQWpDO0FBRUEsYUFBTyxLQUFLL0UsR0FBTCxDQUFVa0UsRUFBVixDQUFQO0FBRUEsS0FORDtBQVFBLEdBWmUsRUE3Z0JpQjtBQTJoQmpDYyxFQUFBQSxPQUFPLEVBQUUsWUFBWTtBQUVwQjtBQUNBO0FBRUEsUUFBSWQsRUFBRSxHQUFHLElBQUlwRyxPQUFKLEVBQVQ7QUFFQSxXQUFPLFNBQVNrSCxPQUFULENBQWtCQyxNQUFsQixFQUEyQjtBQUVqQyxhQUFPLEtBQUtqRixHQUFMLENBQVVrRSxFQUFFLENBQUMvRSxJQUFILENBQVM4RixNQUFULEVBQWtCNUUsY0FBbEIsQ0FBa0MsSUFBSSxLQUFLb0QsR0FBTCxDQUFVd0IsTUFBVixDQUF0QyxDQUFWLENBQVA7QUFFQSxLQUpEO0FBTUEsR0FiUSxFQTNoQndCO0FBMGlCakNDLEVBQUFBLE9BQU8sRUFBRSxpQkFBVzlGLENBQVgsRUFBZTtBQUV2QixRQUFJK0YsS0FBSyxHQUFHLEtBQUsxQixHQUFMLENBQVVyRSxDQUFWLElBQWtCd0QsSUFBSSxDQUFDZSxJQUFMLENBQVcsS0FBS0QsUUFBTCxLQUFrQnRFLENBQUMsQ0FBQ3NFLFFBQUYsRUFBN0IsQ0FBOUIsQ0FGdUIsQ0FJdkI7O0FBRUEsV0FBT2QsSUFBSSxDQUFDd0MsSUFBTCxDQUFXQyxhQUFNdkMsS0FBTixDQUFhcUMsS0FBYixFQUFvQixDQUFFLENBQXRCLEVBQXlCLENBQXpCLENBQVgsQ0FBUDtBQUVBLEdBbGpCZ0M7QUFvakJqQ0csRUFBQUEsVUFBVSxFQUFFLG9CQUFXbEcsQ0FBWCxFQUFlO0FBRTFCLFdBQU93RCxJQUFJLENBQUNlLElBQUwsQ0FBVyxLQUFLNEIsaUJBQUwsQ0FBd0JuRyxDQUF4QixDQUFYLENBQVA7QUFFQSxHQXhqQmdDO0FBMGpCakNtRyxFQUFBQSxpQkFBaUIsRUFBRSwyQkFBV25HLENBQVgsRUFBZTtBQUVqQyxRQUFJb0csRUFBRSxHQUFHLEtBQUt6SCxDQUFMLEdBQVNxQixDQUFDLENBQUNyQixDQUFwQjtBQUFBLFFBQXVCMEgsRUFBRSxHQUFHLEtBQUt6SCxDQUFMLEdBQVNvQixDQUFDLENBQUNwQixDQUF2QztBQUFBLFFBQTBDMEgsRUFBRSxHQUFHLEtBQUt6SCxDQUFMLEdBQVNtQixDQUFDLENBQUNuQixDQUExRDtBQUVBLFdBQU91SCxFQUFFLEdBQUdBLEVBQUwsR0FBVUMsRUFBRSxHQUFHQSxFQUFmLEdBQW9CQyxFQUFFLEdBQUdBLEVBQWhDO0FBRUEsR0Foa0JnQztBQWtrQmpDQyxFQUFBQSxtQkFBbUIsRUFBRSw2QkFBV3ZHLENBQVgsRUFBZTtBQUVuQyxXQUFPd0QsSUFBSSxDQUFDaUIsR0FBTCxDQUFVLEtBQUs5RixDQUFMLEdBQVNxQixDQUFDLENBQUNyQixDQUFyQixJQUEyQjZFLElBQUksQ0FBQ2lCLEdBQUwsQ0FBVSxLQUFLN0YsQ0FBTCxHQUFTb0IsQ0FBQyxDQUFDcEIsQ0FBckIsQ0FBM0IsR0FBc0Q0RSxJQUFJLENBQUNpQixHQUFMLENBQVUsS0FBSzVGLENBQUwsR0FBU21CLENBQUMsQ0FBQ25CLENBQXJCLENBQTdEO0FBRUEsR0F0a0JnQztBQXdrQmpDMkgsRUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVdoRyxDQUFYLEVBQWU7QUFFaEMsV0FBTyxLQUFLaUcsc0JBQUwsQ0FBNkJqRyxDQUFDLENBQUNrRyxNQUEvQixFQUF1Q2xHLENBQUMsQ0FBQ21HLEdBQXpDLEVBQThDbkcsQ0FBQyxDQUFDdUYsS0FBaEQsQ0FBUDtBQUVBLEdBNWtCZ0M7QUE4a0JqQ1UsRUFBQUEsc0JBQXNCLEVBQUUsZ0NBQVdDLE1BQVgsRUFBbUJDLEdBQW5CLEVBQXdCWixLQUF4QixFQUFnQztBQUV2RCxRQUFJYSxZQUFZLEdBQUdwRCxJQUFJLENBQUNxRCxHQUFMLENBQVVGLEdBQVYsSUFBa0JELE1BQXJDO0FBRUEsU0FBSy9ILENBQUwsR0FBU2lJLFlBQVksR0FBR3BELElBQUksQ0FBQ3FELEdBQUwsQ0FBVWQsS0FBVixDQUF4QjtBQUNBLFNBQUtuSCxDQUFMLEdBQVM0RSxJQUFJLENBQUNzRCxHQUFMLENBQVVILEdBQVYsSUFBa0JELE1BQTNCO0FBQ0EsU0FBSzdILENBQUwsR0FBUytILFlBQVksR0FBR3BELElBQUksQ0FBQ3NELEdBQUwsQ0FBVWYsS0FBVixDQUF4QjtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBeGxCZ0M7QUEwbEJqQ2dCLEVBQUFBLGtCQUFrQixFQUFFLDRCQUFXQyxDQUFYLEVBQWU7QUFFbEMsV0FBTyxLQUFLQyx3QkFBTCxDQUErQkQsQ0FBQyxDQUFDTixNQUFqQyxFQUF5Q00sQ0FBQyxDQUFDakIsS0FBM0MsRUFBa0RpQixDQUFDLENBQUNwSSxDQUFwRCxDQUFQO0FBRUEsR0E5bEJnQztBQWdtQmpDcUksRUFBQUEsd0JBQXdCLEVBQUUsa0NBQVdQLE1BQVgsRUFBbUJYLEtBQW5CLEVBQTBCbkgsQ0FBMUIsRUFBOEI7QUFFdkQsU0FBS0QsQ0FBTCxHQUFTK0gsTUFBTSxHQUFHbEQsSUFBSSxDQUFDcUQsR0FBTCxDQUFVZCxLQUFWLENBQWxCO0FBQ0EsU0FBS25ILENBQUwsR0FBU0EsQ0FBVDtBQUNBLFNBQUtDLENBQUwsR0FBUzZILE1BQU0sR0FBR2xELElBQUksQ0FBQ3NELEdBQUwsQ0FBVWYsS0FBVixDQUFsQjtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBeG1CZ0M7QUEwbUJqQ21CLEVBQUFBLHFCQUFxQixFQUFFLCtCQUFXbkYsQ0FBWCxFQUFlO0FBRXJDLFFBQUlDLENBQUMsR0FBR0QsQ0FBQyxDQUFDRSxRQUFWO0FBRUEsU0FBS3RELENBQUwsR0FBU3FELENBQUMsQ0FBRSxFQUFGLENBQVY7QUFDQSxTQUFLcEQsQ0FBTCxHQUFTb0QsQ0FBQyxDQUFFLEVBQUYsQ0FBVjtBQUNBLFNBQUtuRCxDQUFMLEdBQVNtRCxDQUFDLENBQUUsRUFBRixDQUFWO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0FwbkJnQztBQXNuQmpDbUYsRUFBQUEsa0JBQWtCLEVBQUUsNEJBQVdwRixDQUFYLEVBQWU7QUFFbEMsUUFBSXFGLEVBQUUsR0FBRyxLQUFLQyxtQkFBTCxDQUEwQnRGLENBQTFCLEVBQTZCLENBQTdCLEVBQWlDZ0MsTUFBakMsRUFBVDtBQUNBLFFBQUl1RCxFQUFFLEdBQUcsS0FBS0QsbUJBQUwsQ0FBMEJ0RixDQUExQixFQUE2QixDQUE3QixFQUFpQ2dDLE1BQWpDLEVBQVQ7QUFDQSxRQUFJd0QsRUFBRSxHQUFHLEtBQUtGLG1CQUFMLENBQTBCdEYsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBaUNnQyxNQUFqQyxFQUFUO0FBRUEsU0FBS3BGLENBQUwsR0FBU3lJLEVBQVQ7QUFDQSxTQUFLeEksQ0FBTCxHQUFTMEksRUFBVDtBQUNBLFNBQUt6SSxDQUFMLEdBQVMwSSxFQUFUO0FBRUEsV0FBTyxJQUFQO0FBRUEsR0Fsb0JnQztBQW9vQmpDRixFQUFBQSxtQkFBbUIsRUFBRSw2QkFBV3RGLENBQVgsRUFBY3RDLEtBQWQsRUFBc0I7QUFFMUMsV0FBTyxLQUFLK0gsU0FBTCxDQUFnQnpGLENBQUMsQ0FBQ0UsUUFBbEIsRUFBNEJ4QyxLQUFLLEdBQUcsQ0FBcEMsQ0FBUDtBQUVBLEdBeG9CZ0M7QUEwb0JqQ2dJLEVBQUFBLE1BQU0sRUFBRSxnQkFBV3pILENBQVgsRUFBZTtBQUV0QixXQUFXQSxDQUFDLENBQUNyQixDQUFGLEtBQVEsS0FBS0EsQ0FBZixJQUF3QnFCLENBQUMsQ0FBQ3BCLENBQUYsS0FBUSxLQUFLQSxDQUFyQyxJQUE4Q29CLENBQUMsQ0FBQ25CLENBQUYsS0FBUSxLQUFLQSxDQUFwRTtBQUVBLEdBOW9CZ0M7QUFncEJqQzJJLEVBQUFBLFNBQVMsRUFBRSxtQkFBV0UsS0FBWCxFQUFrQkMsTUFBbEIsRUFBMkI7QUFFckMsUUFBS0EsTUFBTSxLQUFLeEgsU0FBaEIsRUFBNEJ3SCxNQUFNLEdBQUcsQ0FBVDtBQUU1QixTQUFLaEosQ0FBTCxHQUFTK0ksS0FBSyxDQUFFQyxNQUFGLENBQWQ7QUFDQSxTQUFLL0ksQ0FBTCxHQUFTOEksS0FBSyxDQUFFQyxNQUFNLEdBQUcsQ0FBWCxDQUFkO0FBQ0EsU0FBSzlJLENBQUwsR0FBUzZJLEtBQUssQ0FBRUMsTUFBTSxHQUFHLENBQVgsQ0FBZDtBQUVBLFdBQU8sSUFBUDtBQUVBLEdBMXBCZ0M7QUE0cEJqQ0MsRUFBQUEsT0FBTyxFQUFFLGlCQUFXRixLQUFYLEVBQWtCQyxNQUFsQixFQUEyQjtBQUVuQyxRQUFLRCxLQUFLLEtBQUt2SCxTQUFmLEVBQTJCdUgsS0FBSyxHQUFHLEVBQVI7QUFDM0IsUUFBS0MsTUFBTSxLQUFLeEgsU0FBaEIsRUFBNEJ3SCxNQUFNLEdBQUcsQ0FBVDtBQUU1QkQsSUFBQUEsS0FBSyxDQUFFQyxNQUFGLENBQUwsR0FBa0IsS0FBS2hKLENBQXZCO0FBQ0ErSSxJQUFBQSxLQUFLLENBQUVDLE1BQU0sR0FBRyxDQUFYLENBQUwsR0FBc0IsS0FBSy9JLENBQTNCO0FBQ0E4SSxJQUFBQSxLQUFLLENBQUVDLE1BQU0sR0FBRyxDQUFYLENBQUwsR0FBc0IsS0FBSzlJLENBQTNCO0FBRUEsV0FBTzZJLEtBQVA7QUFFQSxHQXZxQmdDO0FBeXFCakNHLEVBQUFBLG1CQUFtQixFQUFFLDZCQUFXQyxTQUFYLEVBQXNCckksS0FBdEIsRUFBNkJrSSxNQUE3QixFQUFzQztBQUUxRCxRQUFLQSxNQUFNLEtBQUt4SCxTQUFoQixFQUE0QjtBQUUzQkMsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWMscUVBQWQ7QUFFQTs7QUFFRCxTQUFLMUIsQ0FBTCxHQUFTbUosU0FBUyxDQUFDQyxJQUFWLENBQWdCdEksS0FBaEIsQ0FBVDtBQUNBLFNBQUtiLENBQUwsR0FBU2tKLFNBQVMsQ0FBQ0UsSUFBVixDQUFnQnZJLEtBQWhCLENBQVQ7QUFDQSxTQUFLWixDQUFMLEdBQVNpSixTQUFTLENBQUNHLElBQVYsQ0FBZ0J4SSxLQUFoQixDQUFUO0FBRUEsV0FBTyxJQUFQO0FBRUE7QUF2ckJnQyxDQUFsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9NYXRoIH0gZnJvbSAnLi9NYXRoLmpzJztcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuL1F1YXRlcm5pb24uanMnO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGtpbGUgLyBodHRwOi8va2lsZS5zdHJhdmFnYW56YS5vcmcvXG4gKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBWZWN0b3IzKCB4LCB5LCB6ICkge1xuXG5cdHRoaXMueCA9IHggfHwgMDtcblx0dGhpcy55ID0geSB8fCAwO1xuXHR0aGlzLnogPSB6IHx8IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggVmVjdG9yMy5wcm90b3R5cGUsIHtcblxuXHRpc1ZlY3RvcjM6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cdFx0dGhpcy56ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRaOiBmdW5jdGlvbiAoIHogKSB7XG5cblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHRoaXMueiA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRjYXNlIDI6IHJldHVybiB0aGlzLno7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnksIHRoaXMueiApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblx0XHR0aGlzLnogPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cdFx0dGhpcy56ICs9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gcztcblx0XHR0aGlzLnkgKz0gcztcblx0XHR0aGlzLnogKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblx0XHR0aGlzLnogPSBhLnogKyBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFZlY3RvcjogZnVuY3Rpb24gKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YjogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cdFx0dGhpcy56IC09IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnggLT0gcztcblx0XHR0aGlzLnkgLT0gcztcblx0XHR0aGlzLnogLT0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54IC0gYi54O1xuXHRcdHRoaXMueSA9IGEueSAtIGIueTtcblx0XHR0aGlzLnogPSBhLnogLSBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCAqPSB2Lng7XG5cdFx0dGhpcy55ICo9IHYueTtcblx0XHR0aGlzLnogKj0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKiBiLng7XG5cdFx0dGhpcy55ID0gYS55ICogYi55O1xuXHRcdHRoaXMueiA9IGEueiAqIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlFdWxlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGFwcGx5RXVsZXIoIGV1bGVyICkge1xuXG5cdFx0XHRpZiAoICEgKCBldWxlciAmJiBldWxlci5pc0V1bGVyICkgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlZlY3RvcjM6IC5hcHBseUV1bGVyKCkgbm93IGV4cGVjdHMgYW4gRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggZXVsZXIgKSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YXBwbHlBeGlzQW5nbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhcHBseU1hdHJpeDM6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdICogejtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXSAqIHo7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHZhciB3ID0gMSAvICggZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKTtcblxuXHRcdHRoaXMueCA9ICggZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSApICogdztcblx0XHR0aGlzLnkgPSAoIGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogeiArIGVbIDEzIF0gKSAqIHc7XG5cdFx0dGhpcy56ID0gKCBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSApICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlRdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHR2YXIgcXggPSBxLngsIHF5ID0gcS55LCBxeiA9IHEueiwgcXcgPSBxLnc7XG5cblx0XHQvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY3RvclxuXG5cdFx0dmFyIGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuXHRcdHZhciBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcblx0XHR2YXIgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XG5cdFx0dmFyIGl3ID0gLSBxeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG5cblx0XHQvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG5cblx0XHR0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtIHF4ICsgaXkgKiAtIHF6IC0gaXogKiAtIHF5O1xuXHRcdHRoaXMueSA9IGl5ICogcXcgKyBpdyAqIC0gcXkgKyBpeiAqIC0gcXggLSBpeCAqIC0gcXo7XG5cdFx0dGhpcy56ID0gaXogKiBxdyArIGl3ICogLSBxeiArIGl4ICogLSBxeSAtIGl5ICogLSBxeDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cHJvamVjdDogZnVuY3Rpb24gKCBjYW1lcmEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fSxcblxuXHR1bnByb2plY3Q6IGZ1bmN0aW9uICggY2FtZXJhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdH0sXG5cblx0dHJhbnNmb3JtRGlyZWN0aW9uOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHQvLyBpbnB1dDogVEhSRUUuTWF0cml4NCBhZmZpbmUgbWF0cml4XG5cdFx0Ly8gdmVjdG9yIGludGVycHJldGVkIGFzIGEgZGlyZWN0aW9uXG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHo7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6O1xuXHRcdHRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHo7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcblxuXHR9LFxuXG5cdGRpdmlkZTogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54IC89IHYueDtcblx0XHR0aGlzLnkgLz0gdi55O1xuXHRcdHRoaXMueiAvPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH0sXG5cblx0bWluOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1pbiggdGhpcy56LCB2LnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWF4OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggdGhpcy56LCB2LnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIG1pbi56LCBNYXRoLm1pbiggbWF4LnosIHRoaXMueiApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wU2NhbGFyOiBmdW5jdGlvbiAoIG1pblZhbCwgbWF4VmFsICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueiApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wTGVuZ3RoOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9LFxuXG5cdGZsb29yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2VpbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmRUb1plcm86IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9ICggdGhpcy54IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnggKSA6IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9ICggdGhpcy56IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnogKSA6IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXHRcdHRoaXMueiA9IC0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkb3Q6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2Lno7XG5cblx0fSxcblxuXHQvLyBUT0RPIGxlbmd0aFNxdWFyZWQ/XG5cblx0bGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLno7XG5cblx0fSxcblxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiApO1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuTGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApICsgTWF0aC5hYnMoIHRoaXMueiApO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH0sXG5cblx0c2V0TGVuZ3RoOiBmdW5jdGlvbiAoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9LFxuXG5cdGxlcnA6IGZ1bmN0aW9uICggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cdFx0dGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycFZlY3RvcnM6IGZ1bmN0aW9uICggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYyLCB2MSApLm11bHRpcGx5U2NhbGFyKCBhbHBoYSApLmFkZCggdjEgKTtcblxuXHR9LFxuXG5cdGNyb3NzOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmNyb3NzKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuY3Jvc3NWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5jcm9zc1ZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmNyb3NzVmVjdG9ycyggdGhpcywgdiApO1xuXG5cdH0sXG5cblx0Y3Jvc3NWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR2YXIgYXggPSBhLngsIGF5ID0gYS55LCBheiA9IGEuejtcblx0XHR2YXIgYnggPSBiLngsIGJ5ID0gYi55LCBieiA9IGIuejtcblxuXHRcdHRoaXMueCA9IGF5ICogYnogLSBheiAqIGJ5O1xuXHRcdHRoaXMueSA9IGF6ICogYnggLSBheCAqIGJ6O1xuXHRcdHRoaXMueiA9IGF4ICogYnkgLSBheSAqIGJ4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRwcm9qZWN0T25WZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0dmFyIHNjYWxhciA9IHZlY3Rvci5kb3QoIHRoaXMgKSAvIHZlY3Rvci5sZW5ndGhTcSgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weSggdmVjdG9yICkubXVsdGlwbHlTY2FsYXIoIHNjYWxhciApO1xuXG5cdH0sXG5cblx0cHJvamVjdE9uUGxhbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcHJvamVjdE9uUGxhbmUoIHBsYW5lTm9ybWFsICkge1xuXG5cdFx0XHR2MS5jb3B5KCB0aGlzICkucHJvamVjdE9uVmVjdG9yKCBwbGFuZU5vcm1hbCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zdWIoIHYxICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyZWZsZWN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByZWZsZWN0IGluY2lkZW50IHZlY3RvciBvZmYgcGxhbmUgb3J0aG9nb25hbCB0byBub3JtYWxcblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBoYXZlIHVuaXQgbGVuZ3RoXG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJlZmxlY3QoIG5vcm1hbCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc3ViKCB2MS5jb3B5KCBub3JtYWwgKS5tdWx0aXBseVNjYWxhciggMiAqIHRoaXMuZG90KCBub3JtYWwgKSApICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhbmdsZVRvOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgdGhldGEgPSB0aGlzLmRvdCggdiApIC8gKCBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApICk7XG5cblx0XHQvLyBjbGFtcCwgdG8gaGFuZGxlIG51bWVyaWNhbCBwcm9ibGVtc1xuXG5cdFx0cmV0dXJuIE1hdGguYWNvcyggX01hdGguY2xhbXAoIHRoZXRhLCAtIDEsIDEgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5kaXN0YW5jZVRvU3F1YXJlZCggdiApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvU3F1YXJlZDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dmFyIGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueSwgZHogPSB0aGlzLnogLSB2Lno7XG5cblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6O1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuRGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKSArIE1hdGguYWJzKCB0aGlzLnogLSB2LnogKTtcblxuXHR9LFxuXG5cdHNldEZyb21TcGhlcmljYWw6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21TcGhlcmljYWxDb29yZHMoIHMucmFkaXVzLCBzLnBoaSwgcy50aGV0YSApO1xuXG5cdH0sXG5cblx0c2V0RnJvbVNwaGVyaWNhbENvb3JkczogZnVuY3Rpb24gKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7XG5cblx0XHR2YXIgc2luUGhpUmFkaXVzID0gTWF0aC5zaW4oIHBoaSApICogcmFkaXVzO1xuXG5cdFx0dGhpcy54ID0gc2luUGhpUmFkaXVzICogTWF0aC5zaW4oIHRoZXRhICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jb3MoIHBoaSApICogcmFkaXVzO1xuXHRcdHRoaXMueiA9IHNpblBoaVJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQ3lsaW5kcmljYWw6IGZ1bmN0aW9uICggYyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DeWxpbmRyaWNhbENvb3JkcyggYy5yYWRpdXMsIGMudGhldGEsIGMueSApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzOiBmdW5jdGlvbiAoIHJhZGl1cywgdGhldGEsIHkgKSB7XG5cblx0XHR0aGlzLnggPSByYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4UG9zaXRpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDEyIF07XG5cdFx0dGhpcy55ID0gZVsgMTMgXTtcblx0XHR0aGlzLnogPSBlWyAxNCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4U2NhbGU6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciBzeCA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdHZhciBzeSA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpO1xuXHRcdHZhciBzeiA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0dGhpcy54ID0gc3g7XG5cdFx0dGhpcy55ID0gc3k7XG5cdFx0dGhpcy56ID0gc3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXhDb2x1bW46IGZ1bmN0aW9uICggbSwgaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkoIG0uZWxlbWVudHMsIGluZGV4ICogNCApO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICYmICggdi56ID09PSB0aGlzLnogKSApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy56ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuXG5leHBvcnQgeyBWZWN0b3IzIH07Il19