"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.integrate = void 0;

var _constants = require("./constants");

var _constants2 = require("../core/constants");

/**
 * Performs euler integration on the particle.
 *
 * @param {Particle} particle - The particle to integrate
 * @param {number} time - The factor of time to use
 * @param {number} damping - The damping to use
 * @return void
 */
var eulerIntegration = function eulerIntegration(particle, time, damping) {
  if (particle.sleep) {
    return;
  }

  particle.old.position.copy(particle.position);
  particle.old.velocity.copy(particle.velocity);
  particle.acceleration.scalar(1 / particle.mass);
  particle.velocity.add(particle.acceleration.scalar(time));
  particle.position.add(particle.old.velocity.scalar(time));
  damping && particle.velocity.scalar(Math.pow(damping, time / _constants2.DEFAULT_SYSTEM_DELTA));
  particle.acceleration.clear();
};
/**
 * Performs the chosen integration on the particle.
 * Defaults to euler integration.
 *
 * @param {Particle} particle - The particle to integrate
 * @param {number} time - The factor of time to use
 * @param {number} damping - The damping to use
 * @param {string} [type=INTEGRATION_TYPE_EULER] - The algorithm to use
 * @return void
 */


var integrate = function integrate(particle, time, damping) {
  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _constants.INTEGRATION_TYPE_EULER;

  switch (type) {
    case _constants.INTEGRATION_TYPE_EULER:
      eulerIntegration(particle, time, damping);
      break;

    default:
      eulerIntegration(particle, time, damping);
  }
};

exports.integrate = integrate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYXRoL2ludGVncmF0aW9uLmpzIl0sIm5hbWVzIjpbImV1bGVySW50ZWdyYXRpb24iLCJwYXJ0aWNsZSIsInRpbWUiLCJkYW1waW5nIiwic2xlZXAiLCJvbGQiLCJwb3NpdGlvbiIsImNvcHkiLCJ2ZWxvY2l0eSIsImFjY2VsZXJhdGlvbiIsInNjYWxhciIsIm1hc3MiLCJhZGQiLCJNYXRoIiwicG93IiwiREVGQVVMVF9TWVNURU1fREVMVEEiLCJjbGVhciIsImludGVncmF0ZSIsInR5cGUiLCJJTlRFR1JBVElPTl9UWVBFX0VVTEVSIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsUUFBRCxFQUFXQyxJQUFYLEVBQWlCQyxPQUFqQixFQUE2QjtBQUNwRCxNQUFJRixRQUFRLENBQUNHLEtBQWIsRUFBb0I7QUFDbEI7QUFDRDs7QUFFREgsRUFBQUEsUUFBUSxDQUFDSSxHQUFULENBQWFDLFFBQWIsQ0FBc0JDLElBQXRCLENBQTJCTixRQUFRLENBQUNLLFFBQXBDO0FBQ0FMLEVBQUFBLFFBQVEsQ0FBQ0ksR0FBVCxDQUFhRyxRQUFiLENBQXNCRCxJQUF0QixDQUEyQk4sUUFBUSxDQUFDTyxRQUFwQztBQUNBUCxFQUFBQSxRQUFRLENBQUNRLFlBQVQsQ0FBc0JDLE1BQXRCLENBQTZCLElBQUlULFFBQVEsQ0FBQ1UsSUFBMUM7QUFDQVYsRUFBQUEsUUFBUSxDQUFDTyxRQUFULENBQWtCSSxHQUFsQixDQUFzQlgsUUFBUSxDQUFDUSxZQUFULENBQXNCQyxNQUF0QixDQUE2QlIsSUFBN0IsQ0FBdEI7QUFDQUQsRUFBQUEsUUFBUSxDQUFDSyxRQUFULENBQWtCTSxHQUFsQixDQUFzQlgsUUFBUSxDQUFDSSxHQUFULENBQWFHLFFBQWIsQ0FBc0JFLE1BQXRCLENBQTZCUixJQUE3QixDQUF0QjtBQUNBQyxFQUFBQSxPQUFPLElBQ0xGLFFBQVEsQ0FBQ08sUUFBVCxDQUFrQkUsTUFBbEIsQ0FBeUJHLElBQUksQ0FBQ0MsR0FBTCxDQUFTWCxPQUFULEVBQWtCRCxJQUFJLEdBQUdhLGdDQUF6QixDQUF6QixDQURGO0FBRUFkLEVBQUFBLFFBQVEsQ0FBQ1EsWUFBVCxDQUFzQk8sS0FBdEI7QUFDRCxDQWJEO0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQ3ZCaEIsUUFEdUIsRUFFdkJDLElBRnVCLEVBR3ZCQyxPQUh1QixFQUtwQjtBQUFBLE1BREhlLElBQ0csdUVBRElDLGlDQUNKOztBQUNILFVBQVFELElBQVI7QUFDRSxTQUFLQyxpQ0FBTDtBQUNFbkIsTUFBQUEsZ0JBQWdCLENBQUNDLFFBQUQsRUFBV0MsSUFBWCxFQUFpQkMsT0FBakIsQ0FBaEI7QUFDQTs7QUFDRjtBQUNFSCxNQUFBQSxnQkFBZ0IsQ0FBQ0MsUUFBRCxFQUFXQyxJQUFYLEVBQWlCQyxPQUFqQixDQUFoQjtBQUxKO0FBT0QsQ0FiTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElOVEVHUkFUSU9OX1RZUEVfRVVMRVIgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBERUZBVUxUX1NZU1RFTV9ERUxUQSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzJztcblxuLyoqXG4gKiBQZXJmb3JtcyBldWxlciBpbnRlZ3JhdGlvbiBvbiB0aGUgcGFydGljbGUuXG4gKlxuICogQHBhcmFtIHtQYXJ0aWNsZX0gcGFydGljbGUgLSBUaGUgcGFydGljbGUgdG8gaW50ZWdyYXRlXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIFRoZSBmYWN0b3Igb2YgdGltZSB0byB1c2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBkYW1waW5nIC0gVGhlIGRhbXBpbmcgdG8gdXNlXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuY29uc3QgZXVsZXJJbnRlZ3JhdGlvbiA9IChwYXJ0aWNsZSwgdGltZSwgZGFtcGluZykgPT4ge1xuICBpZiAocGFydGljbGUuc2xlZXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJ0aWNsZS5vbGQucG9zaXRpb24uY29weShwYXJ0aWNsZS5wb3NpdGlvbik7XG4gIHBhcnRpY2xlLm9sZC52ZWxvY2l0eS5jb3B5KHBhcnRpY2xlLnZlbG9jaXR5KTtcbiAgcGFydGljbGUuYWNjZWxlcmF0aW9uLnNjYWxhcigxIC8gcGFydGljbGUubWFzcyk7XG4gIHBhcnRpY2xlLnZlbG9jaXR5LmFkZChwYXJ0aWNsZS5hY2NlbGVyYXRpb24uc2NhbGFyKHRpbWUpKTtcbiAgcGFydGljbGUucG9zaXRpb24uYWRkKHBhcnRpY2xlLm9sZC52ZWxvY2l0eS5zY2FsYXIodGltZSkpO1xuICBkYW1waW5nICYmXG4gICAgcGFydGljbGUudmVsb2NpdHkuc2NhbGFyKE1hdGgucG93KGRhbXBpbmcsIHRpbWUgLyBERUZBVUxUX1NZU1RFTV9ERUxUQSkpO1xuICBwYXJ0aWNsZS5hY2NlbGVyYXRpb24uY2xlYXIoKTtcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgdGhlIGNob3NlbiBpbnRlZ3JhdGlvbiBvbiB0aGUgcGFydGljbGUuXG4gKiBEZWZhdWx0cyB0byBldWxlciBpbnRlZ3JhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1BhcnRpY2xlfSBwYXJ0aWNsZSAtIFRoZSBwYXJ0aWNsZSB0byBpbnRlZ3JhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gVGhlIGZhY3RvciBvZiB0aW1lIHRvIHVzZVxuICogQHBhcmFtIHtudW1iZXJ9IGRhbXBpbmcgLSBUaGUgZGFtcGluZyB0byB1c2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZT1JTlRFR1JBVElPTl9UWVBFX0VVTEVSXSAtIFRoZSBhbGdvcml0aG0gdG8gdXNlXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuZXhwb3J0IGNvbnN0IGludGVncmF0ZSA9IChcbiAgcGFydGljbGUsXG4gIHRpbWUsXG4gIGRhbXBpbmcsXG4gIHR5cGUgPSBJTlRFR1JBVElPTl9UWVBFX0VVTEVSXG4pID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBJTlRFR1JBVElPTl9UWVBFX0VVTEVSOlxuICAgICAgZXVsZXJJbnRlZ3JhdGlvbihwYXJ0aWNsZSwgdGltZSwgZGFtcGluZyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZXVsZXJJbnRlZ3JhdGlvbihwYXJ0aWNsZSwgdGltZSwgZGFtcGluZyk7XG4gIH1cbn07XG4iXX0=