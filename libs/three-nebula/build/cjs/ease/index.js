"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEasingByName = exports.setEasingByName = exports.easeInOutBack = exports.easeOutBack = exports.easeInBack = exports.easeInOutCirc = exports.easeOutCirc = exports.easeInCirc = exports.easeInOutExpo = exports.easeOutExpo = exports.easeInExpo = exports.easeInOutSine = exports.easeOutSine = exports.easeInSine = exports.easeInOutQuart = exports.easeOutQuart = exports.easeInQuart = exports.easeInOutCubic = exports.easeOutCubic = exports.easeInCubic = exports.easeInOutQuad = exports.easeOutQuad = exports.easeInQuad = exports.easeLinear = exports.ease = void 0;

var _constants = require("../constants");

/**
 * The Ease class provides a collection of easing functions for use with System
 */
var ease = {
  easeLinear: function easeLinear(value) {
    return value;
  },
  easeInQuad: function easeInQuad(value) {
    return Math.pow(value, 2);
  },
  easeOutQuad: function easeOutQuad(value) {
    return -(Math.pow(value - 1, 2) - 1);
  },
  easeInOutQuad: function easeInOutQuad(value) {
    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);
    return -0.5 * ((value -= 2) * value - 2);
  },
  easeInCubic: function easeInCubic(value) {
    return Math.pow(value, 3);
  },
  easeOutCubic: function easeOutCubic(value) {
    return Math.pow(value - 1, 3) + 1;
  },
  easeInOutCubic: function easeInOutCubic(value) {
    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);
    return 0.5 * (Math.pow(value - 2, 3) + 2);
  },
  easeInQuart: function easeInQuart(value) {
    return Math.pow(value, 4);
  },
  easeOutQuart: function easeOutQuart(value) {
    return -(Math.pow(value - 1, 4) - 1);
  },
  easeInOutQuart: function easeInOutQuart(value) {
    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);
    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);
  },
  easeInSine: function easeInSine(value) {
    return -Math.cos(value * (_constants.PI / 2)) + 1;
  },
  easeOutSine: function easeOutSine(value) {
    return Math.sin(value * (_constants.PI / 2));
  },
  easeInOutSine: function easeInOutSine(value) {
    return -0.5 * (Math.cos(_constants.PI * value) - 1);
  },
  easeInExpo: function easeInExpo(value) {
    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));
  },
  easeOutExpo: function easeOutExpo(value) {
    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;
  },
  easeInOutExpo: function easeInOutExpo(value) {
    if (value === 0) return 0;
    if (value === 1) return 1;
    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));
    return 0.5 * (-Math.pow(2, -10 * --value) + 2);
  },
  easeInCirc: function easeInCirc(value) {
    return -(Math.sqrt(1 - value * value) - 1);
  },
  easeOutCirc: function easeOutCirc(value) {
    return Math.sqrt(1 - Math.pow(value - 1, 2));
  },
  easeInOutCirc: function easeInOutCirc(value) {
    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);
    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);
  },
  easeInBack: function easeInBack(value) {
    var s = 1.70158;
    return value * value * ((s + 1) * value - s);
  },
  easeOutBack: function easeOutBack(value) {
    var s = 1.70158;
    return (value = value - 1) * value * ((s + 1) * value + s) + 1;
  },
  easeInOutBack: function easeInOutBack(value) {
    var s = 1.70158;
    if ((value /= 0.5) < 1) return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));
    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);
  }
};
exports.ease = ease;
var easeLinear = ease.easeLinear,
    easeInQuad = ease.easeInQuad,
    easeOutQuad = ease.easeOutQuad,
    easeInOutQuad = ease.easeInOutQuad,
    easeInCubic = ease.easeInCubic,
    easeOutCubic = ease.easeOutCubic,
    easeInOutCubic = ease.easeInOutCubic,
    easeInQuart = ease.easeInQuart,
    easeOutQuart = ease.easeOutQuart,
    easeInOutQuart = ease.easeInOutQuart,
    easeInSine = ease.easeInSine,
    easeOutSine = ease.easeOutSine,
    easeInOutSine = ease.easeInOutSine,
    easeInExpo = ease.easeInExpo,
    easeOutExpo = ease.easeOutExpo,
    easeInOutExpo = ease.easeInOutExpo,
    easeInCirc = ease.easeInCirc,
    easeOutCirc = ease.easeOutCirc,
    easeInOutCirc = ease.easeInOutCirc,
    easeInBack = ease.easeInBack,
    easeOutBack = ease.easeOutBack,
    easeInOutBack = ease.easeInOutBack;
exports.easeInOutBack = easeInOutBack;
exports.easeOutBack = easeOutBack;
exports.easeInBack = easeInBack;
exports.easeInOutCirc = easeInOutCirc;
exports.easeOutCirc = easeOutCirc;
exports.easeInCirc = easeInCirc;
exports.easeInOutExpo = easeInOutExpo;
exports.easeOutExpo = easeOutExpo;
exports.easeInExpo = easeInExpo;
exports.easeInOutSine = easeInOutSine;
exports.easeOutSine = easeOutSine;
exports.easeInSine = easeInSine;
exports.easeInOutQuart = easeInOutQuart;
exports.easeOutQuart = easeOutQuart;
exports.easeInQuart = easeInQuart;
exports.easeInOutCubic = easeInOutCubic;
exports.easeOutCubic = easeOutCubic;
exports.easeInCubic = easeInCubic;
exports.easeInOutQuad = easeInOutQuad;
exports.easeOutQuad = easeOutQuad;
exports.easeInQuad = easeInQuad;
exports.easeLinear = easeLinear;

var setEasingByName = function setEasingByName(easeName) {
  if (ease[easeName]) return ease[easeName];else return ease.easeLinear;
};

exports.setEasingByName = setEasingByName;

var getEasingByName = function getEasingByName(name) {
  return ease[name] ? ease[name] : ease.easeLinear;
};

exports.getEasingByName = getEasingByName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,