"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _types = require("../../../types");

var _constants = require("./constants");

var _constants2 = require("../../../../constants");

var _potpack = _interopRequireDefault(require("potpack"));

/**
 * Dynamic texture atlas for performant support of systems with multiple emitters and textures.
 *
 */
var TextureAtlas = /*#__PURE__*/function () {
  function TextureAtlas(renderer, shouldDebug) {
    (0, _classCallCheck2["default"])(this, TextureAtlas);
    var THREE = renderer.three,
        rendererType = renderer.type;
    var data = new Float32Array(_constants.DATA_TEXTURE_SIZE * 4);
    var ctx = this.ctx = document.createElement('canvas').getContext('2d');
    var canvas = ctx.canvas;
    this.shouldDebug = shouldDebug;
    this.rendererType = rendererType;
    this.indexData = data;
    this.canvas = canvas;
    this.entries = [];

    if (rendererType === _types.RENDERER_TYPE_GPU_DESKTOP) {
      this.atlasIndex = new THREE.DataTexture(data, _constants.DATA_TEXTURE_SIZE, 1, THREE.RGBAFormat, THREE.FloatType);
    }

    canvas.width = canvas.height = _constants.DATA_TEXTURE_SIZE;

    if (shouldDebug) {
      this.debug(canvas, ctx);
    }

    this.atlasTexture = new THREE.CanvasTexture(canvas);
    this.atlasTexture.flipY = false;
    renderer.material.uniforms.uTexture.value = this.atlasTexture;

    if (rendererType === _types.RENDERER_TYPE_GPU_DESKTOP) {
      renderer.material.uniforms.atlasIndex.value = this.atlasIndex;
    }

    renderer.material.uniformsNeedUpdate = true;
  }
  /**
   * Logs to the console when in dev mode.
   *
   */


  (0, _createClass2["default"])(TextureAtlas, [{
    key: "log",
    value: function log() {
      var _console;

      if (!_constants2.__DEV__) {
        return;
      }

      (_console = console).log.apply(_console, arguments);
    }
    /**
     * Debugs the texture atlas by rendering it to a canvas in the DOM.
     *
     */

  }, {
    key: "debug",
    value: function debug() {
      var canvas = this.canvas,
          ctx = this.ctx;
      var halfmax = canvas.width;
      ctx.fillStyle = 'purple';
      ctx.fillRect(0, 0, halfmax, halfmax);
      ctx.fillStyle = 'green';
      ctx.fillRect(0, halfmax, halfmax, halfmax);
      ctx.fillStyle = 'blue';
      ctx.fillRect(halfmax, 0, halfmax, halfmax);
      ctx.fillStyle = 'orange';
      ctx.fillRect(halfmax, halfmax, halfmax, halfmax);
      ctx.fillStyle = 'yellow';
      ctx.font = canvas.width + 'px Verdana';
      ctx.fillText('top row', 100, 500);
      ctx.fillStyle = 'pink';
      ctx.fillText('bottom row', 100, 1500);
      canvas.style.position = 'absolute';
      canvas.style.width = canvas.style.height = '300px';
      canvas.style.left = canvas.style.top = '0px';
      canvas.style.zIndex = 100;
      document.body.appendChild(canvas);
    }
    /**
     * Adds a texture to the texture atlas and flags that the atlas needs to be updated.
     *
     */

  }, {
    key: "addTexture",
    value: function addTexture(texture) {
      this.log('Adding texture to atlas:', texture.uuid);
      texture.textureIndex = this.entries.length;
      this.entries.push({
        texture: texture
      });
      this.needsUpdate = true;
    }
    /**
     * Updates the texture atlas. Will only rebuild the atlas if all images are loaded.
     *
     */

  }, {
    key: "update",
    value: function update() {
      if (!this.needsUpdate) {
        return;
      }

      var entries = this.entries,
          canvas = this.canvas,
          indexData = this.indexData,
          ctx = this.ctx,
          atlasIndex = this.atlasIndex,
          atlasTexture = this.atlasTexture,
          rendererType = this.rendererType;

      for (var i = 0; i < entries.length; i++) {
        if (!entries[i].texture.image) {
          return;
        }
      }

      this.needsUpdate = false;

      for (var _i = 0; _i < entries.length; _i++) {
        var e = entries[_i];
        var texture = e.texture;
        var _texture$image = texture.image,
            width = _texture$image.width,
            height = _texture$image.height;
        e.w = width;
        e.h = height;
      }

      var stats = (0, _potpack["default"])(entries);
      this.log('Rebuilt atlas:', stats);

      if (canvas.width != stats.w || canvas.height != stats.h) {
        canvas.width = stats.w;
        canvas.height = stats.h;
      }

      for (var _i2 = 0; _i2 < entries.length; _i2++) {
        var _e = this.entries[_i2];
        var ii = _e.texture.textureIndex * 4;

        if (rendererType === _types.RENDERER_TYPE_GPU_DESKTOP) {
          indexData[ii + 0] = _e.x / canvas.width;
          indexData[ii + 1] = _e.y / canvas.height;
          indexData[ii + 2] = (_e.x + _e.w) / canvas.width;
          indexData[ii + 3] = (_e.y + _e.h) / canvas.height;
        }

        if (rendererType === _types.RENDERER_TYPE_GPU_MOBILE) {
          indexData[ii + 0] = _e.x / (canvas.width + 1);
          indexData[ii + 1] = _e.y / (canvas.height + 1);
          indexData[ii + 2] = (_e.x + _e.w) / (canvas.width + 1);
          indexData[ii + 3] = (_e.y + _e.h) / (canvas.height + 1);
        }

        ctx.drawImage(_e.texture.image, _e.x, _e.y, _e.w, _e.h);
      }

      if (rendererType === _types.RENDERER_TYPE_GPU_DESKTOP) {
        atlasIndex.needsUpdate = true;
      }

      atlasTexture.needsUpdate = true;
    }
    /**
     * Disposes of the textures used by the texture atlas.
     *
     * @return void
     */

  }, {
    key: "destroy",
    value: function destroy() {
      var atlasIndex = this.atlasIndex,
          atlasTexture = this.atlasTexture,
          canvas = this.canvas;
      atlasTexture.dispose();
      atlasIndex && atlasIndex.dispose();

      if (this.shouldDebug) {
        canvas.remove();
      }

      this.entries = [];
    }
  }]);
  return TextureAtlas;
}();

exports["default"] = TextureAtlas;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,